- name: Create Credentials for ZTP
  connection: local
  hosts: localhost
  gather_facts: no

  vars:

    credentials_namespace: ztp-credentials

    create_aap2_controller_secret: true
    aap2_operator_namespace: ansible-automation-platform
    aap2_controller_name: ac-tower

    ## Path to the OpenShift Pull Secret
    create_pull_secret_secret: true
    pull_secret_path: ~/rh-ocp-pull-secret.json
    pull_secret: "{{ lookup('file', pull_secret_path) | to_json }}"

    ## vCenter Credentials
    create_vsphere_credentials_secret: true
    vcenter_secret_name: loe-rdu-vcenter-credentials
    vcenter_fqdn: vcenter.example.com
    vcenter_username: some-user
    vcenter_password: some-password

    ## Git Push Credentials
    create_git_push_credentials_secret: true
    query_gitea_for_url: true
    git_push_credentials_secret_name: git-push-credentials
    git_push_credentials_auth_method: basic # ssh or basic
    git_push_branch: main
    git_push_user_name: ZTPBot
    git_push_user_email: ztp-bot@notredhat.com

    root_ca_bundle_configmap_name: cluster-root-ca-bundle

  environment:
    http_proxy: "{{ http_proxy | default('') }}"
    https_proxy: "{{ https_proxy | default('') }}"
    no_proxy: "{{ no_proxy | default('') }}"
    HTTP_PROXY: "{{ http_proxy | default('') }}"
    HTTPS_PROXY: "{{ https_proxy | default('') }}"
    NO_PROXY: "{{ no_proxy | default('') }}"
    K8S_AUTH_PROXY: "{{ http_proxy | default('') }}"
    K8S_AUTH_NO_PROXY: "{{ no_proxy | default('') }}"

  tasks:
  #######################################################
  ## Tower Preflight - this can be skipped if using the quay.io/kenmoini/git-aap2-ee execution environment
  #- name: Preflight for Tower
  #  block:
  #  - name: Install needed pip modules if running in Tower
  #    pip:
  #      name:
  #        - kubernetes
  #        - openshift==0.12.1
  #      extra_args: --upgrade
  #    delegate_to: localhost
  #
  #  - name: Install needed packages in Ansible EE
  #    shell: microdnf install -y git
  #    delegate_to: localhost
  #
  #  when: tower_job_id is defined

  #######################################################
  ## Namespace Creation
  - name: Create namespace for {{ credentials_namespace }}
    kubernetes.core.k8s:
      state: present
      kind: Namespace
      api_version: v1
      merge_type:
      - strategic-merge
      - merge
      definition:
        metadata:
          name: "{{ credentials_namespace }}"
        spec: {}
    register: k8s_run
    until: k8s_run is not failed
    delay: 10
    retries: 6

  #######################################################
  ## AAP2 Controller Secret
  - name: Create the AAP2 Controller Secrets from the aap2-controller-admin-application-token Secret
    block:
    - name: Get the AAP2 Controller Route
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Route
        namespace: "{{ aap2_operator_namespace }}"
        name: "{{ aap2_controller_name }}"
      register: aap2_controller_route

    - name: Get the AAP2 Controller User OAuth Token
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Secret
        namespace: "{{ aap2_operator_namespace }}"
        name: aap2-controller-admin-application-token
      register: aap2_controller_user_oauth_token

    - name: Create Ansible Controller/Tower OAuth Secret
      kubernetes.core.k8s:
        state: present
        apply: yes
        definition:
          apiVersion: v1
          kind: Secret
          metadata:
            name: ansible-tower-credentials
            namespace: "{{ credentials_namespace }}"
            annotations:
              reflector.v1.k8s.emberstack.com/reflection-allowed: "true"
              reflector.v1.k8s.emberstack.com/reflection-allowed-namespaces: '.*'
              reflector.v1.k8s.emberstack.com/reflection-auto-enabled: 'true'
          type: Opaque
          stringData:
            host: "https://{{ aap2_controller_route.resources[0].status.ingress[0].host }}"
            token: "{{ aap2_controller_user_oauth_token.resources[0].data.token | b64decode }}"
      register: k8s_run
      until: k8s_run is not failed
      delay: 10
      retries: 6
    when: create_aap2_controller_secret|bool


  #######################################################
  ## Assisted Service Pull Secret Secret Creation
  - name: Create Assisted Service Pull Secret
    when: create_pull_secret_secret|bool
    kubernetes.core.k8s:
      state: present
      apply: yes
      definition:
        apiVersion: v1
        kind: Secret
        metadata:
          name: assisted-deployment-pull-secret
          namespace: "{{ credentials_namespace }}"
          annotations:
            reflector.v1.k8s.emberstack.com/reflection-allowed: "true"
            reflector.v1.k8s.emberstack.com/reflection-allowed-namespaces: '.*'
            reflector.v1.k8s.emberstack.com/reflection-auto-enabled: 'true'
        type: kubernetes.io/dockerconfigjson
        stringData:
          .dockerconfigjson: '{{ pull_secret }}'
    register: k8s_run
    until: k8s_run is not failed
    delay: 10
    retries: 6


  #######################################################
  ## Root Cluster CA Bundle ConfigMap Creation
  - name: Check to see if the cluster-wide certificates and proxy config are set
    kubernetes.core.k8s_info:
      api_version: config.openshift.io/v1
      kind: Proxy
      name: cluster
    register: r_cluster_proxy_config

  - name: Create Root Cluster CA Bundle ConfigMap and Secret
    when: r_cluster_proxy_config.resources[0].spec.trustedCA.name is defined and r_cluster_proxy_config.resources[0].spec.trustedCA.name != '' 
    block:
      - name: Create Root Cluster CA Bundle ConfigMap
        kubernetes.core.k8s:
          state: present
          apply: yes
          definition:
            apiVersion: v1
            kind: ConfigMap
            metadata:
              name: "{{ root_ca_bundle_configmap_name }}"
              namespace: "{{ credentials_namespace }}"
              annotations:
                reflector.v1.k8s.emberstack.com/reflection-allowed: "true"
                reflector.v1.k8s.emberstack.com/reflection-allowed-namespaces: '.*'
                reflector.v1.k8s.emberstack.com/reflection-auto-enabled: 'true'
              labels:
                config.openshift.io/inject-trusted-cabundle: 'true'
            data: {}
        register: k8s_run
        until: k8s_run is not failed
        delay: 10
        retries: 6

      - name: Query the cluster-wide Root CAs ConfigMap
        kubernetes.core.k8s_info:
          api_version: v1
          kind: ConfigMap
          namespace: "{{ credentials_namespace }}"
          name: "{{ root_ca_bundle_configmap_name }}"
        until: cm_k8s_info_run.resources | length > 0
        register: cm_k8s_info_run
        delay: 10
        retries: 30

      - name: Copy data over to a secret
        kubernetes.core.k8s:
          state: present
          api_version: v1
          kind: Secret
          namespace: "{{ credentials_namespace }}"
          merge_type:
          - strategic-merge
          - merge
          definition:
            metadata:
              name: "{{ root_ca_bundle_configmap_name }}"
              annotations:
                reflector.v1.k8s.emberstack.com/reflection-allowed: "true"
                reflector.v1.k8s.emberstack.com/reflection-allowed-namespaces: '.*'
                reflector.v1.k8s.emberstack.com/reflection-auto-enabled: 'true'
            stringData:
              tls-ca-bundle.pem: "{{ cm_k8s_info_run.resources[0].data['ca-bundle.crt'] }}"
        register: cm_new_k8s_run
        until: cm_new_k8s_run is not failed

  #######################################################
  ## vSphere Credential Secret Creation
  - name: Create vCenter Credentials Secret
    when: create_vsphere_credentials_secret|bool
    block:
    - name: Create vCenter connection Secret
      kubernetes.core.k8s:
        state: present
        apply: yes
        definition:
          apiVersion: v1
          kind: Secret
          metadata:
            name: "{{ vcenter_secret_name }}"
            namespace: "{{ credentials_namespace }}"
            annotations:
              reflector.v1.k8s.emberstack.com/reflection-allowed: "true"
              reflector.v1.k8s.emberstack.com/reflection-allowed-namespaces: '.*'
              reflector.v1.k8s.emberstack.com/reflection-auto-enabled: 'true'
          type: Opaque
          stringData:
            vcenter_fqdn: "{{ vcenter_fqdn }}"
            vcenter_username: "{{ vcenter_username }}"
            vcenter_password: "{{ vcenter_password }}"
            skip_ssl_validation: "true"
      register: k8s_run
      until: k8s_run is not failed
      delay: 10
      retries: 6

    #- name: Create vCenter cloud integration credential Secret
    #  kubernetes.core.k8s:
    #    state: present
    #    template: templates/40_vsphere_cloud_credential.yml.j2
    #  register: k8s_run
    #  until: k8s_run is not failed
    #  delay: 10
    #  retries: 30

  ###############################################################################################
  ## Gitea
  ###############################################################################################
  - name: Get the Push Git URL from locally hosted Gitea
    when: query_gitea_for_url|bool
    block:
    - name: Get the Gitea Route
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Route
        namespace: gitea
        name: gitea
      register: gitea_route

    - name: Set the Git Repo fact if defined - Basic Auth
      set_fact:
        git_push_repo_url: "https://{{ gitea_route.resources[0].status.ingress[0].host }}/user-1/openshift-ztp.git"
      when: (gitea_route.resources | length > 0) and (git_push_repo_url is not defined) and (git_push_credentials_auth_method == "basic")

    - name: Set the Git Repo fact if defined - SSH
      set_fact:
        git_push_repo_url: "git@{{ gitea_route.resources[0].status.ingress[0].host }}:user-1/openshift-ztp.git"
      when: (gitea_route.resources | length > 0) and (git_push_repo_url is not defined) and (git_push_credentials_auth_method == "ssh")

    - name: Set the Git Username and Password fact if not defined - Basic Auth
      set_fact:
        git_push_username: user-1
        git_push_password: openshift
      when: (gitea_route.resources | length > 0) and (git_push_username is not defined) and (git_push_credentials_auth_method == "basic")

    - name: Set the Git Username and Password fact if defined - SSH
      set_fact:
        git_push_username: git
      when: (gitea_route.resources | length > 0) and (git_push_username is not defined) and (git_push_credentials_auth_method == "ssh")

  #########################################################
  ## Git Push Credentials
  - name: Create Git Push Credentials
    when: create_git_push_credentials_secret|bool
    block:
    - name: Create Git Credentials
      kubernetes.core.k8s:
        state: present
        apply: yes
        definition:
          apiVersion: v1
          kind: Secret
          metadata:
            name: "{{ git_push_credentials_secret_name }}"
            namespace: "{{ credentials_namespace }}"
            annotations:
              reflector.v1.k8s.emberstack.com/reflection-allowed: "true"
              reflector.v1.k8s.emberstack.com/reflection-allowed-namespaces: '.*'
              reflector.v1.k8s.emberstack.com/reflection-auto-enabled: 'true'
          type: Opaque
          stringData:
            git_url: "{{ git_push_repo_url }}"
            git_branch: "{{ git_push_branch }}"
            git_auth_method: "{{ git_push_credentials_auth_method }}"
            git_username: "{{ git_push_username | default('git') }}"
            git_password: "{{ git_push_password | default('') }}"
            git_user_name: "{{ git_push_user_name }}"
            git_user_email: "{{ git_push_user_email }}"
            git_ssh_key: |
              "{{ git_push_ssh_key | default('') }}"
      register: k8s_run
      until: k8s_run is not failed
      delay: 10
      retries: 6