---
# tasks file for configure_rhacm_oas

- name: Set fact for asset URL
  when: not use_ztp_mirror|bool
  set_fact:
    live_iso_asset_url: "https://mirror.openshift.com"
    root_fs_asset_url: "https://mirror.openshift.com"

- name: Set facts for when using the ZTP Mirror
  when: use_ztp_mirror|bool
  block:
    - name: get route subdomain
      k8s_info:
        kind: IngressController
        name: default
        namespace: openshift-ingress-operator
      register: route_subdomain_r

    - name: set route_subdomain
      set_fact:
        route_subdomain: "{{ route_subdomain_r.resources[0].status.domain }}"

    - name: Set fact for asset URL as a Route
      when: not use_services_not_routes|bool
      set_fact:
        live_iso_asset_url: "https://ztp-mirror-ztp-mirror.{{ route_subdomain }}"
        root_fs_asset_url: "https://ztp-mirror-ztp-mirror.{{ route_subdomain }}"

    - name: Set facts for when using the ZTP Mirror as a Service
      when: use_services_not_routes|bool
      set_fact:
        live_iso_asset_url: "http://ztp-mirror.ztp-mirror.svc.cluster.local:8080"
        root_fs_asset_url: "https://ztp-mirror-ztp-mirror.{{ route_subdomain }}"

    - name: Add information to the output_lines variable
      set_fact:
        output_lines: "{{ output_lines + [line_item] }}"
      loop:
        - "OAS live_iso_asset_url: {{ live_iso_asset_url }}"
        - "OAS root_fs_asset_url: {{ root_fs_asset_url }}"
      loop_control:
        loop_var: line_item

- name: Get Cluster Version
  kubernetes.core.k8s_info:
    api_version: config.openshift.io/v1
    kind: ClusterVersion
    name: version
  register: r_ocp_version

- name: Add ConfigMaps and Secrets needed for Custom Root CAs
  include_tasks: create_root_ca_objects.yml
  vars:
    target_namespace: "{{ ns_item }}"
    root_ca_bundle_name: "{{ root_ca_object_name }}"
    #custom_root_ca_name: "{{ custom_root_ca_name }}"
  loop:
    - "{{ acm_operator_namespace }}"
    - hive
    - multicluster-engine
  loop_control:
    loop_var: ns_item

#- name: Check to see if the cluster-wide certificates and proxy config are set
#  kubernetes.core.k8s_info:
#    api_version: config.openshift.io/v1
#    kind: Proxy
#    name: cluster
#  register: r_cluster_proxy_config

#- name: Add the needed empty ConfigMap to populate with cluster-wide Root CAs
#  when: (r_cluster_proxy_config.resources[0].spec.trustedCA.name is defined) and (r_cluster_proxy_config.resources[0].spec.trustedCA.name != '')
#  kubernetes.core.k8s:
#    state: present
#    api_version: v1
#    kind: ConfigMap
#    namespace: "{{ ns_item }}"
#    merge_type:
#    - strategic-merge
#    - merge
#    definition:
#      metadata:
#        name: "{{ root_ca_object_name }}"
#        labels:
#          config.openshift.io/inject-trusted-cabundle: 'true'
#      data: {}
#  loop:
#    - "{{ acm_operator_namespace }}"
#    - hive
#    - multicluster-engine
#  loop_control:
#    loop_var: ns_item

#- name: Query the cluster-wide Root CAs ConfigMap
#  when: (r_cluster_proxy_config.resources[0].spec.trustedCA.name is defined) and (r_cluster_proxy_config.resources[0].spec.trustedCA.name != '')
#  kubernetes.core.k8s_info:
#    api_version: v1
#    kind: ConfigMap
#    namespace: "{{ acm_operator_namespace }}"
#    name: "{{ root_ca_object_name }}"
#  until: cm_k8s_info_run.resources | length > 0
#  register: cm_k8s_info_run
#  delay: 10
#  retries: 3

#- name: Copy data over to a secret formatted for Assisted Service
#  when: (r_cluster_proxy_config.resources[0].spec.trustedCA.name is defined) and (r_cluster_proxy_config.resources[0].spec.trustedCA.name != '')
#  kubernetes.core.k8s:
#    state: present
#    api_version: v1
#    kind: Secret
#    namespace: "{{ ns_item }}"
#    merge_type:
#    - strategic-merge
#    - merge
#    definition:
#      metadata:
#        name: "{{ root_ca_object_name }}"
#      stringData:
#        ca.crt: "{{ cm_k8s_info_run.resources[0].data['ca-bundle.crt'] }}"
#  loop:
#    - "{{ acm_operator_namespace }}"
#    - hive
#    - multicluster-engine
#  loop_control:
#    loop_var: ns_item

- name: Set cluster version
  set_fact:
    ocp_version: "{{ r_ocp_version.resources[0].status.desired.version | split('-') | first }}"

- name: Set empty fact for major release version
  set_fact:
    major_release_versions: []

- name: Create a list of just the major versions
  when: (release_item.split('.')[:-1] | join('.')) not in major_release_versions
  set_fact:
    major_release_versions: "{{ major_release_versions + [release_item.split('.')[:-1] | join('.')] }}"
  loop: "{{ release_versions }}"
  loop_control:
    label: "{{ release_item.split('.')[:-1] | join('.') }} from {{ release_item }}"
    loop_var: release_item

- name: Make sure the RHACM Subscription is installed
  kubernetes.core.k8s_info:
    api_version: operators.coreos.com/v1alpha1
    kind: Subscription
    name: advanced-cluster-management
    namespace: "{{ acm_operator_namespace }}"
  register: r_subscription
  retries: 3
  delay: 10
  until: r_subscription.resources | list | length == 1

- name: Apply the Cluster Releases
  kubernetes.core.k8s:
    state: present
    merge_type:
    - strategic-merge
    - merge
    definition: "{{ lookup('template', 'templates/02_clusterImageSet.yml.j2' ) | from_yaml }}"
  register: k8s_run
  until: k8s_run is not failed
  delay: 10
  retries: 3
  loop: "{{ release_versions }}"
  loop_control:
    loop_var: release_long_version

- name: Apply the Mirror Registry ConfigMap
  when: configure_registry_mirror|bool and (r_cluster_proxy_config.resources[0].spec.trustedCA.name is defined) and (r_cluster_proxy_config.resources[0].spec.trustedCA.name != '')
  kubernetes.core.k8s:
    state: present
    merge_type:
    - strategic-merge
    - merge
    definition: "{{ lookup('template', 'templates/00_mirror_registry_configmap.yml.j2' ) | from_yaml }}"
  register: k8s_run
  until: k8s_run is not failed
  delay: 10
  retries: 3

- name: Apply the Operator configuration
  kubernetes.core.k8s:
    state: present
    merge_type:
    - strategic-merge
    - merge
    definition: "{{ lookup('template', file_item ) | from_yaml }}"
  register: k8s_run
  until: k8s_run is not failed
  delay: 10
  retries: 3
  loop:
    - templates/01_hiveconfig.yml.j2
    - templates/03_assisted_service_configmap.yml.j2
    - templates/04_assisted-deployment-pull_secret.yml.j2
    - templates/05_agentserviceconfig.yml.j2
    - templates/06_multiclusterengine.yml.j2
  loop_control:
    loop_var: file_item
