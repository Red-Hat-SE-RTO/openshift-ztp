---
# tasks file for deploy_aap2_controller

- name: Clear out facts
  set_fact:
    operator_csv_version: ""
    operator_csv_version_index: ""
    operator_api_definition: ""
    operator_api_version: ""

- name: Get Cluster Version
  kubernetes.core.k8s_info:
    api_version: config.openshift.io/v1
    kind: ClusterVersion
    name: version
  register: r_ocp_version

- name: Set cluster version
  set_fact:
    ocp_version: "{{ r_ocp_version.resources[0].status.desired.version | split('-') | first }}"

- name: Query the ansible-automation-platform-operator PackageManifest for the latest version of the Red Hat OpenShift GitOps Operator
  kubernetes.core.k8s_info:
    api_version: packages.operators.coreos.com/v1
    kind: PackageManifest
    name: ansible-automation-platform-operator
    namespace: openshift-marketplace
  register: r_pm

- name: Set the latest release channels
  set_fact:
    operator_release_channels: "{{ operator_release_channels|default([]) + [chan_item.name] }}"
  loop: "{{ r_pm.resources[0].status.channels }}"
  loop_control:
    loop_var: chan_item
    index_var: chan_idx
    label: "{{ chan_item.name }}"
  when: chan_item.name is search("stable")

- name: Set the latest release channels for cluster-scoped AAP2
  set_fact:
    operator_release_channels_cluster: "{{ chan_item }}"
  loop: "{{ operator_release_channels }}"
  loop_control:
    loop_var: chan_item
    index_var: chan_idx
  when: chan_item is search("cluster-scoped")

- name: Set the latest CSV version
  set_fact:
    operator_channel: "{{ chan_item.name }}"
    operator_csv_version: "{{ chan_item.currentCSV }}"
    operator_csv_version_index: "{{ chan_idx }}"
  loop: "{{ r_pm.resources[0].status.channels }}"
  loop_control:
    loop_var: chan_item
    index_var: chan_idx
    label: "{{ chan_item.name }}"
  when: chan_item.name == operator_release_channels_cluster

- name: Set additional operator specific facts
  set_fact:
    operator_api_definition: "{{ r_pm.resources[0].status.channels[operator_csv_version_index].currentCSVDesc.customresourcedefinitions.owned | json_query(\"[?(@.kind=='AutomationController')].name\") | first }}"
    operator_api_version: "{{ r_pm.resources[0].status.channels[operator_csv_version_index].currentCSVDesc.customresourcedefinitions.owned | json_query(\"[?(@.kind=='AutomationController')].version\") | first }}"

- name: Debug
  debug:
    msg:
      - "OpenShift Version: {{ ocp_version }}"
      - "Operator Channel: {{ operator_channel }}"
      - "Operator CSV version: {{ operator_csv_version }}"
      - "Operator API Definition: {{ operator_api_definition }}"
      - "Operator API Version: {{ operator_api_version }}"

- name: Create namespace for {{ aap_operator_namespace }}
  kubernetes.core.k8s:
    state: present
    kind: Namespace
    api_version: v1
    merge_type:
    - strategic-merge
    - merge
    definition:
      metadata:
        name: "{{ aap_operator_namespace }}"
        #labels:
          #openshift.io/cluster-monitoring: 'true'
      spec: {}
  register: k8s_run
  until: k8s_run is not failed
  delay: 10
  retries: 3

# ===============================================================================================
# Add the custom Root CAs
# ===============================================================================================

- name: Check to see if the cluster-wide certificates are set
  kubernetes.core.k8s_info:
    api_version: config.openshift.io/v1
    kind: Proxy
    name: cluster
  register: r_cluster_root_ca_aap2

- name: Add the needed empty ConfigMap to populate with cluster-wide Root CAs
  kubernetes.core.k8s:
    state: present
    api_version: v1
    kind: ConfigMap
    namespace: "{{ aap_operator_namespace }}"
    merge_type:
    - strategic-merge
    - merge
    definition:
      metadata:
        name: cluster-root-ca-bundle
        labels:
          config.openshift.io/inject-trusted-cabundle: 'true'
      data: {}
  when: (r_cluster_root_ca_aap2.resources[0].spec.trustedCA.name is defined) and (r_cluster_root_ca_aap2.resources[0].spec.trustedCA.name != '')
  register: cm_k8s_run

- name: Query the cluster-wide Root CAs ConfigMap
  kubernetes.core.k8s_info:
    api_version: v1
    kind: ConfigMap
    namespace: "{{ aap_operator_namespace }}"
    name: cluster-root-ca-bundle
  until: cm_k8s_info_run.resources | length > 0
  register: cm_k8s_info_run
  delay: 10
  retries: 3

- name: Copy data over to a secret formatted for AAP2
  kubernetes.core.k8s:
    state: present
    api_version: v1
    kind: Secret
    namespace: "{{ aap_operator_namespace }}"
    merge_type:
    - strategic-merge
    - merge
    definition:
      metadata:
        name: cluster-root-ca-aap2-bundle
      stringData:
        bundle-ca.crt: "{{ cm_k8s_info_run.resources[0].data['ca-bundle.crt'] }}"
  when: (r_cluster_root_ca_aap2.resources[0].spec.trustedCA.name is defined) and (r_cluster_root_ca_aap2.resources[0].spec.trustedCA.name != '')
  register: cm_new_k8s_run
  until: cm_new_k8s_run is not failed

# ===============================================================================================
# Setup Proxy Facts
# ===============================================================================================

#- name: Set the fact for httpProxy
#  when: (r_cluster_root_ca_aap2.resources[0].status.httpProxy is defined) and (r_cluster_root_ca_aap2.resources[0].status.httpProxy != '')
#  set_fact:
#    cluster_http_proxy: "{{ r_cluster_root_ca_aap2.resources[0].status.httpProxy }}"
#
#- name: Set the fact for httpsProxy
#  when: (r_cluster_root_ca_aap2.resources[0].status.httpsProxy is defined) and (r_cluster_root_ca_aap2.resources[0].status.httpsProxy != '')
#  set_fact:
#    cluster_https_proxy: "{{ r_cluster_root_ca_aap2.resources[0].status.httpsProxy }}"
#
#- name: Set the fact for noProxy
#  when: (r_cluster_root_ca_aap2.resources[0].status.noProxy is defined) and (r_cluster_root_ca_aap2.resources[0].status.noProxy != '')
#  set_fact:
#    cluster_no_proxy: "{{ r_cluster_root_ca_aap2.resources[0].status.noProxy }}"

- name: Deploy the unmanaged PostgreSQL instance
  kubernetes.core.k8s:
    state: present
    apply: yes
    definition: "{{ lookup('template', template_item ) | from_yaml }}"
  register: k8s_run
  until: k8s_run is not failed
  delay: 10
  retries: 3
  loop:
    - templates/pgsql-secret.yaml.j2
    - templates/pgsql-service.yaml.j2
    - templates/pgsql-statefulset.yaml.j2
  loop_control:
    loop_var: template_item
  

- name: Query the {{ aap_operator_namespace }} namespace for OperatorGroups
  kubernetes.core.k8s_info:
    api_version: operators.coreos.com/v1
    kind: OperatorGroup
    namespace: "{{ aap_operator_namespace }}"
  register: r_og_list

- name: Create Operator OperatorGroup
  kubernetes.core.k8s:
    state: present
    apply: yes
    definition: "{{ lookup('template', 'templates/operatorgroup.yaml.j2' ) | from_yaml }}"
  register: k8s_run
  until: k8s_run is not failed
  delay: 10
  retries: 3
  when: r_og_list.resources | length == 0

- name: Create Operator subscription
  kubernetes.core.k8s:
    state: present
    merge_type:
    - strategic-merge
    - merge
    definition: "{{ lookup('template', 'templates/subscription.yaml.j2' ) | from_yaml }}"
  register: k8s_run
  until: k8s_run is not failed
  delay: 10
  retries: 3

- name: Wait for the Operator to become available - before v4.9.0
  kubernetes.core.k8s_info:
    api_version: apiextensions.k8s.io/v1beta1
    kind: CustomResourceDefinition
    name: "{{ operator_api_definition }}"
  register: crd_check
  retries: 200
  delay: 10
  until: crd_check.resources | list | length == 1
  when: ocp_version is version('4.9.0', operator='lt', strict=True)

- name: Wait for the Operator to come online - v4.9.0+
  kubernetes.core.k8s_info:
    api_version: apiextensions.k8s.io/v1
    kind: CustomResourceDefinition
    name: "{{ operator_api_definition }}"
  register: crd_check
  retries: 200
  delay: 10
  until: crd_check.resources | list | length == 1
  when: ocp_version is version('4.9.0', operator='ge', strict=True)

- name: Create the Ansible Automation Platform 2 Controller Instance
  kubernetes.core.k8s:
    state: present
    merge_type:
    - strategic-merge
    - merge
    definition: "{{ lookup('template', 'templates/instance.yaml.j2' ) | from_yaml }}"
  register: k8s_run
  until: k8s_run is not failed
  delay: 10
  retries: 3

- name: Provide RBAC for the Tower/Controller
  kubernetes.core.k8s:
    state: present
    merge_type:
    - strategic-merge
    - merge
    definition: "{{ lookup('template', file_item ) | from_yaml }}"
  register: k8s_run
  until: k8s_run is not failed
  delay: 10
  retries: 3
  loop:
    - 'templates/rolebindings.yaml.j2'
    - 'templates/scc.yaml.j2'
  loop_control:
    loop_var: file_item
    index_var: idx
    label: "{{ file_item }}"
