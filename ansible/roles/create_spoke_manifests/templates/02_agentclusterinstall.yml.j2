---
apiVersion: extensions.hive.openshift.io/v1beta1
kind: AgentClusterInstall
metadata:
  name: {{ cluster_name }}
  namespace: {{ cluster_name }}
  annotations:
    agent-install.openshift.io/install-config-overrides: '{{ install_config_overrides | to_json }}'
{% if (deployment_type == "vsphere") or (deployment_type == "vcenter") %}
    #agent-install.openshift.io/install-config-overrides: '{"platform":{"type":"vsphere"}}'
{% else %}
    #agent-install.openshift.io/install-config-overrides: '{"platform":{"type":"baremetal"}}'
{% endif %}
  labels:
    name: {{ cluster_name }}
    cloud: vSphere
    vendor: OpenShift
    datacenter: {{ vcenter_datacenter }}
    cluster: {{ vcenter_cluster }}
    cluster-name: {{ cluster_name }}
    cluster-domain: {{ cluster_name }}.{{ base_domain }}
    cluster-role: ztp-spoke
    cluster-type: {{ cluster_type }}
    deployment-type: {{ deployment_type }}
{% if extra_labels is defined %}
{% for label in extra_labels %}
    {{ label.key }}: {{ label.value }}
{% endfor %}
{% endif %}
spec:
  clusterDeploymentRef:
    name: {{ cluster_name }}
  imageSetRef:
    name: openshift-v{{ openshift_release }}
{% if cluster_type != 'sno' %}
  apiVIP: "{{ cluster_api_vip }}"
  ingressVIP: "{{ cluster_load_balancer_vip }}"
{% endif %}
  holdInstallation: false
  networking:
    networkType: OVNKubernetes
    #userManagedNetworking: false
    clusterNetwork:
      - cidr: "{{ cluster_network_cidr }}"
        hostPrefix: 23
    serviceNetwork:
{% for netwrk in service_network_cidrs %}
      - "{{ netwrk }}"
{% endfor %}
{% if cluster_node_cidr is defined  %}
    machineNetwork:
      - cidr: "{{ cluster_node_cidr }}"
{% endif %}
  provisionRequirements:
    controlPlaneAgents: {{ (cluster_type == 'sno') | ternary('1', '3') }}
  sshPublicKey: "{{ ssh_public_key }}"
{% if manifestOverrides is defined and manifestOverrides | length > 0 %}
  manifestsConfigMapRefs:
{% for manifest in manifestOverrides %}
    - name: {{ manifest.name }}
{% endfor %}
{% endif %}
{% if insert_proxy_agent | bool %}
{% if (spoke_httpproxy is defined) or (spoke_httpsproxy is defined) or (spoke_noproxy is defined) %}
  proxy:
{% if spoke_httpproxy is defined %}
    httpProxy: {{ spoke_httpproxy }}
{% endif %}
{% if spoke_httpsproxy is defined %}
    httpsProxy: {{ spoke_httpsproxy }}
{% endif %}
{% if spoke_noproxy is defined %}
    noProxy: {{ spoke_noproxy }}
{% endif %}
{% endif %}
{% endif %}
