---
# tasks file for configure_aap2_controller
- name: Load manifest into variable
  local_action:
    module: slurp
    src: "{{ subscription_manifest_path }}"
  register: manifest_file

- name: Proxy and Root CA Things
  block:

    - name: Check to see if the cluster-wide certificates and proxy config are set
      kubernetes.core.k8s_info:
        api_version: config.openshift.io/v1
        kind: Proxy
        name: cluster
      register: r_cluster_proxy_config

    # ===============================================================================================
    # Setup Proxy Facts
    # ===============================================================================================

    - name: Set the fact for httpProxy
      when: (r_cluster_proxy_config.resources[0].status.httpProxy is defined) and (r_cluster_proxy_config.resources[0].status.httpProxy != '')
      set_fact:
        cluster_http_proxy: "{{ r_cluster_proxy_config.resources[0].status.httpProxy }}"

    - name: Set the fact for httpsProxy
      when: (r_cluster_proxy_config.resources[0].status.httpsProxy is defined) and (r_cluster_proxy_config.resources[0].status.httpsProxy != '')
      set_fact:
        cluster_https_proxy: "{{ r_cluster_proxy_config.resources[0].status.httpsProxy }}"

    - name: Set the fact for noProxy
      when: (r_cluster_proxy_config.resources[0].status.noProxy is defined) and (r_cluster_proxy_config.resources[0].status.noProxy != '')
      set_fact:
        cluster_no_proxy: "{{ r_cluster_proxy_config.resources[0].status.noProxy }}"
  tags:
    - proxy
    - root_ca

- name: Kubernetes Queries
  block:  
    - name: Get the AAP2 Controller Admin Secret
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Secret
        namespace: "{{ aap2_operator_namespace }}"
        name: "{{ aap2_admin_secret_name }}"
      register: aap2_admin_secret

    - name: Get the AAP2 Controller Route
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Route
        namespace: "{{ aap2_operator_namespace }}"
        name: "{{ aap2_controller_name }}"
      register: aap2_controller_route

    - name: Get the ac-tower ServiceAccount service account
      kubernetes.core.k8s_info:
        api_version: v1
        kind: ServiceAccount
        namespace: "{{ aap2_operator_namespace }}"
        name: "{{ aap2_serviceaccount_name }}"
      register: aap2_serviceaccount

    - name: Set the Token Secret Name
      set_fact:
        aap2_token_secret_name: "{{ secret_item }}"
      loop: "{{ aap2_serviceaccount.resources[0].secrets }}"
      loop_control:
        loop_var: secret_item
      when: secret_item is search(aap2_serviceaccount_name + "-token")

    - name: Get the Token Secret
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Secret
        namespace: "{{ aap2_operator_namespace }}"
        name: "{{ aap2_token_secret_name.name }}"
      register: aap2_k8s_sa_token_secret

    - name: Set facts for AAP 2 Controller
      set_fact:
        aap2_route: "https://{{ aap2_controller_route.resources[0].status.ingress[0].host }}"
        aap2_admin_password: "{{ aap2_admin_secret.resources[0].data.password | b64decode }}"

    - name: Debug
      debug:
        msg:
          - "AAP 2 Route: {{ aap2_route }}"
          - "AAP 2 Admin Password: {{ aap2_admin_password }}"

    - name: Create AAP2 RoleBinding
      kubernetes.core.k8s:
        state: present
        merge_type:
        - strategic-merge
        - merge
        definition: "{{ lookup('template', 'templates/rolebinding.yaml.j2' ) | from_yaml }}"
      register: k8s_run
      until: k8s_run is not failed
      delay: 10
      retries: 30
  tags:
    - k8s_queries

- name: Token cleanup block
  block:
    - name: Log into the Controller and get an OAuth Token
      uri:
        url: "{{ aap2_route }}/api/v2/tokens/"
        method: POST
        status_code:
          - 201
          - 302
        url_username: admin
        url_password: "{{ aap2_admin_password }}"
        validate_certs: no
        force_basic_auth: true
        headers:
          Content-Type: application/json
      register: login_response
      # This time out length is to allow for the initial migrations to take place
      until: login_response.status == 201
      delay: 15
      retries: 120

    - name: Get the current license status
      uri:
        url: "{{ aap2_route }}/api/v2/config/"
        method: GET
        validate_certs: no
        headers:
          Authorization: "Bearer {{ login_response.json.token }}"
      register: config_response

    - name: Post manifest file if not subscribed
      uri:
        url: "{{ aap2_route }}/api/v2/config/"
        method: POST
        headers:
          Authorization: "Bearer {{ login_response.json.token }}"
        body: '{ "eula_accepted": true, "manifest": "{{ manifest_file.content }}" }'
        body_format: json
        validate_certs: no
      when: config_response.json.license_info.date_expired is not defined

    - name: Pause for a few seconds for Tower to parse the license
      pause:
        seconds: 5
      when: config_response.json.license_info.date_expired is not defined

    - name: Get the current User ID
      uri:
        url: "{{ aap2_route }}/api/v2/me/"
        method: GET
        validate_certs: no
        headers:
          Authorization: "Bearer {{ login_response.json.token }}"
      register: user_response
      ignore_errors: true

    - name: Get the SCM Credential Type ID
      uri:
        url: "{{ aap2_route }}/api/v2/credential_types/?name=Source%20Control"
        method: GET
        validate_certs: no
        headers:
          Authorization: "Bearer {{ login_response.json.token }}"
      register: credential_types_response
      ignore_errors: true

    - name: Get the K8s Credential Type ID
      uri:
        url: "{{ aap2_route }}/api/v2/credential_types/?name=OpenShift%20or%20Kubernetes%20API%20Bearer%20Token"
        method: GET
        validate_certs: no
        headers:
          Authorization: "Bearer {{ login_response.json.token }}"
      register: k8s_credential_types_response
      ignore_errors: true

    - name: Get the Ansible Galaxy Credential Type ID
      uri:
        url: "{{ aap2_route }}/api/v2/credential_types/?name={{ 'Ansible Galaxy/Automation Hub API Token' | urlencode }}"
        method: GET
        validate_certs: no
        headers:
          Authorization: "Bearer {{ login_response.json.token }}"
      register: galaxy_credential_types_response
      ignore_errors: true

    - name: Get the Ansible Galaxy Credential ID
      uri:
        url: "{{ aap2_route }}/api/v2/credential_types/{{ galaxy_credential_types_response.json.results[0].id }}/credentials/?order_by=created"
        method: GET
        validate_certs: no
        headers:
          Authorization: "Bearer {{ login_response.json.token }}"
      register: galaxy_credentials_response
      ignore_errors: true

    ###############################################################################################
    ## Gitea
    ###############################################################################################

    - name: Use Internal Gitea
      when: git_repo_url is not defined
      block:

        - name: Use Internal Gitea - Get the Gitea Service
          kubernetes.core.k8s_info:
            api_version: v1
            kind: Service
            namespace: gitea
            name: gitea
          register: gitea_service

        - name: Use Internal Gitea - Get the Gitea Route
          kubernetes.core.k8s_info:
            api_version: v1
            kind: Route
            namespace: gitea
            name: gitea
          register: gitea_route

        - name: Use Internal Gitea - Set the Git Repo fact to the Route
          set_fact:
            git_repo_url: "https://{{ gitea_route.resources[0].status.ingress[0].host }}/user-1/openshift-ztp.git"
          when: gitea_route.resources | length > 0 and not use_services_not_routes|bool

        - name: Use Internal Gitea - Set the Git Repo fact to the Service
          set_fact:
            git_repo_url: "http://gitea.gitea.svc.cluster.local:3000/user-1/openshift-ztp.git"
          when: gitea_service.resources | length > 0 and use_services_not_routes|bool
      tags:
        - gitea

    ###############################################################################################
    ## Job Config
    ###############################################################################################

    - name: Disable Git SSL verification
      block:
        - name: Get the current Job Settings
          uri:
            url: "{{ aap2_route }}/api/v2/settings/jobs/"
            method: GET
            validate_certs: no
            headers:
              Authorization: "Bearer {{ login_response.json.token }}"
          register: job_settings_response

        - name: Set a new JSON object if the GIT_SSL_NO_VERIFY key does not exists
          set_fact:
            job_settings_json: "{{ job_settings_response.json['AWX_TASK_ENV'] | combine({\"GIT_SSL_NO_VERIFY\": \"true\"}) }}"
          when: job_settings_response.json['AWX_TASK_ENV']['GIT_SSL_NO_VERIFY'] is not defined

        - name: Patch the API with the new JSON setting
          uri:
            url: "{{ aap2_route }}/api/v2/settings/jobs/"
            method: PATCH
            headers:
              Authorization: "Bearer {{ login_response.json.token }}"
            body: "{ 'AWX_TASK_ENV': {{ job_settings_json }} }"
            body_format: json
            validate_certs: no
          register: job_settings_patch_response
          when: job_settings_response.json['AWX_TASK_ENV']['GIT_SSL_NO_VERIFY'] is not defined
      tags:
        - job_config
        - job_config_disable_git_ssl_verification

    - name: Disable the Ansible Galaxy SSL verification
      block:
        - name: Patch the API with the new JSON setting for disabling Galaxy SSL verification
          uri:
            url: "{{ aap2_route }}/api/v2/settings/jobs/"
            method: PATCH
            headers:
              Authorization: "Bearer {{ login_response.json.token }}"
            body: "{ \"GALAXY_IGNORE_CERTS\": true }"
            body_format: json
            validate_certs: no
          register: galaxy_job_settings_patch_response
      tags:
        - job_config
        - job_config_disable_galaxy_ssl_verification

    ###############################################################################################
    ## Proxy Config - HTTP
    ###############################################################################################

    - name: Configure the HTTP Proxy Configuration
      when: cluster_http_proxy is defined
      block:
        - name: Get the current Job Settings
          uri:
            url: "{{ aap2_route }}/api/v2/settings/jobs/"
            method: GET
            validate_certs: no
            headers:
              Authorization: "Bearer {{ login_response.json.token }}"
          register: http_job_settings_response

        - name: Create the update objects
          set_fact:
            big_http_proxy_object:
              HTTP_PROXY: "{{ cluster_http_proxy }}"

        - name: Set a new JSON object if the HTTP_PROXY key does not exists
          set_fact:
            job_settings_json: "{{ http_job_settings_response.json['AWX_TASK_ENV'] | combine(big_http_proxy_object) }}"
          when: http_job_settings_response.json['AWX_TASK_ENV']['HTTP_PROXY'] is not defined

        - name: Patch the API with the new JSON setting - HTTP_PROXY
          uri:
            url: "{{ aap2_route }}/api/v2/settings/jobs/"
            method: PATCH
            headers:
              Authorization: "Bearer {{ login_response.json.token }}"
            body: "{ 'AWX_TASK_ENV': {{ job_settings_json }} }"
            body_format: json
            validate_certs: no
          register: job_settings_patch_response
          when: http_job_settings_response.json['AWX_TASK_ENV']['HTTP_PROXY'] is not defined

        - name: Reset facts
          set_fact:
            job_settings_json: ""
            http_job_settings_response: {}
      tags:
        - proxy_config
        - http_proxy

    ###############################################################################################
    ## Proxy Config - HTTPS
    ###############################################################################################

    - name: Configure the HTTPS Proxy Configuration
      when: cluster_https_proxy is defined
      block:
        - name: Get the current Job Settings
          uri:
            url: "{{ aap2_route }}/api/v2/settings/jobs/"
            method: GET
            validate_certs: no
            headers:
              Authorization: "Bearer {{ login_response.json.token }}"
          register: https_job_settings_response

        - name: Create the update objects
          set_fact:
            big_https_proxy_object:
              HTTPS_PROXY: "{{ cluster_https_proxy }}"

        - name: Set a new JSON object if the HTTPS_PROXY key does not exists
          set_fact:
            job_settings_json: "{{ https_job_settings_response.json['AWX_TASK_ENV'] | combine(big_https_proxy_object) }}"
          when: https_job_settings_response.json['AWX_TASK_ENV']['HTTPS_PROXY'] is not defined

        - name: Patch the API with the new JSON setting - HTTPS_PROXY
          uri:
            url: "{{ aap2_route }}/api/v2/settings/jobs/"
            method: PATCH
            headers:
              Authorization: "Bearer {{ login_response.json.token }}"
            body: "{ 'AWX_TASK_ENV': {{ job_settings_json }} }"
            body_format: json
            validate_certs: no
          register: job_settings_patch_response
          when: https_job_settings_response.json['AWX_TASK_ENV']['HTTPS_PROXY'] is not defined

        - name: Reset facts
          set_fact:
            job_settings_json: ""
            https_job_settings_response: {}
      tags:
        - proxy_config
        - https_proxy

    ###############################################################################################
    ## Proxy Config - NO_PROXY
    ###############################################################################################

    - name: Configure the https Proxy Configuration
      when: cluster_no_proxy is defined
      block:
        - name: Get the current Job Settings
          uri:
            url: "{{ aap2_route }}/api/v2/settings/jobs/"
            method: GET
            validate_certs: no
            headers:
              Authorization: "Bearer {{ login_response.json.token }}"
          register: no_proxy_job_settings_response

        - name: Create the update objects
          set_fact:
            big_no_proxy_object:
              NO_PROXY: "{{ cluster_no_proxy }}"

        - name: Set a new JSON object if the NO_PROXY key does not exists
          set_fact:
            job_settings_json: "{{ no_proxy_job_settings_response.json['AWX_TASK_ENV'] | combine(big_no_proxy_object) }}"
          when: no_proxy_job_settings_response.json['AWX_TASK_ENV']['NO_PROXY'] is not defined

        - name: Patch the API with the new JSON setting - NO_PROXY
          uri:
            url: "{{ aap2_route }}/api/v2/settings/jobs/"
            method: PATCH
            headers:
              Authorization: "Bearer {{ login_response.json.token }}"
            body: "{ 'AWX_TASK_ENV': {{ job_settings_json }} }"
            body_format: json
            validate_certs: no
          register: job_settings_patch_response
          when: no_proxy_job_settings_response.json['AWX_TASK_ENV']['NO_PROXY'] is not defined

        - name: Reset facts
          set_fact:
            job_settings_json: ""
            no_proxy_job_settings_response: {}
      tags:
        - proxy_config
        - no_proxy

    ###############################################################################################
    ## Proxy Config - http
    ###############################################################################################

    - name: Configure the HTTP Proxy Configuration
      when: cluster_http_proxy is defined
      block:
        - name: Get the current Job Settings
          uri:
            url: "{{ aap2_route }}/api/v2/settings/jobs/"
            method: GET
            validate_certs: no
            headers:
              Authorization: "Bearer {{ login_response.json.token }}"
          register: http_job_settings_response

        - name: Create the update objects
          set_fact:
            http_proxy_object:
              http_proxy: "{{ cluster_http_proxy }}"

        - name: Set a new JSON object if the http_proxy key does not exists
          set_fact:
            job_settings_json: "{{ http_job_settings_response.json['AWX_TASK_ENV'] | combine(http_proxy_object) }}"
          when: http_job_settings_response.json['AWX_TASK_ENV']['http_proxy'] is not defined

        - name: Patch the API with the new JSON setting - http_proxy
          uri:
            url: "{{ aap2_route }}/api/v2/settings/jobs/"
            method: PATCH
            headers:
              Authorization: "Bearer {{ login_response.json.token }}"
            body: "{ 'AWX_TASK_ENV': {{ job_settings_json }} }"
            body_format: json
            validate_certs: no
          register: job_settings_patch_response
          when: http_job_settings_response.json['AWX_TASK_ENV']['http_proxy'] is not defined

        - name: Reset facts
          set_fact:
            job_settings_json: ""
            http_job_settings_response: {}
      tags:
        - proxy_config
        - http_proxy

    ###############################################################################################
    ## Proxy Config - https
    ###############################################################################################

    - name: Configure the https Proxy Configuration
      when: cluster_https_proxy is defined
      block:
        - name: Get the current Job Settings
          uri:
            url: "{{ aap2_route }}/api/v2/settings/jobs/"
            method: GET
            validate_certs: no
            headers:
              Authorization: "Bearer {{ login_response.json.token }}"
          register: https_job_settings_response

        - name: Create the update objects
          set_fact:
            https_proxy_object:
              https_proxy: "{{ cluster_https_proxy }}"

        - name: Set a new JSON object if the https_proxy key does not exists
          set_fact:
            job_settings_json: "{{ https_job_settings_response.json['AWX_TASK_ENV'] | combine(https_proxy_object) }}"
          when: https_job_settings_response.json['AWX_TASK_ENV']['https_proxy'] is not defined

        - name: Patch the API with the new JSON setting - https_proxy
          uri:
            url: "{{ aap2_route }}/api/v2/settings/jobs/"
            method: PATCH
            headers:
              Authorization: "Bearer {{ login_response.json.token }}"
            body: "{ 'AWX_TASK_ENV': {{ job_settings_json }} }"
            body_format: json
            validate_certs: no
          register: job_settings_patch_response
          when: https_job_settings_response.json['AWX_TASK_ENV']['https_proxy'] is not defined

        - name: Reset facts
          set_fact:
            job_settings_json: ""
            https_job_settings_response: {}
      tags:
        - proxy_config
        - https_proxy

    ###############################################################################################
    ## Proxy Config - no_proxy
    ###############################################################################################

    - name: Configure the https Proxy Configuration
      when: cluster_no_proxy is defined
      block:
        - name: Get the current Job Settings
          uri:
            url: "{{ aap2_route }}/api/v2/settings/jobs/"
            method: GET
            validate_certs: no
            headers:
              Authorization: "Bearer {{ login_response.json.token }}"
          register: no_proxy_job_settings_response

        - name: Create the update objects
          set_fact:
            no_proxy_object:
              no_proxy: "{{ cluster_no_proxy }}"

        - name: Set a new JSON object if the no_proxy key does not exists
          set_fact:
            job_settings_json: "{{ no_proxy_job_settings_response.json['AWX_TASK_ENV'] | combine(no_proxy_object) }}"
          when: no_proxy_job_settings_response.json['AWX_TASK_ENV']['no_proxy'] is not defined

        - name: Patch the API with the new JSON setting - no_proxy
          uri:
            url: "{{ aap2_route }}/api/v2/settings/jobs/"
            method: PATCH
            headers:
              Authorization: "Bearer {{ login_response.json.token }}"
            body: "{ 'AWX_TASK_ENV': {{ job_settings_json }} }"
            body_format: json
            validate_certs: no
          register: job_settings_patch_response
          when: no_proxy_job_settings_response.json['AWX_TASK_ENV']['no_proxy'] is not defined

        - name: Reset facts
          set_fact:
            job_settings_json: ""
            no_proxy_job_settings_response: {}
      tags:
        - proxy_config
        - no_proxy

    ###############################################################################################
    ## Organization
    ###############################################################################################

    - name: Organization
      block:
        - name: Get the Organization ID from the target Organization Name
          uri:
            url: "{{ aap2_route }}/api/v2/organizations/{{ aap2_organization|urlencode() }}/"
            method: GET
            validate_certs: no
            headers:
              Authorization: "Bearer {{ login_response.json.token }}"
          register: org_response
          ignore_errors: true

        - name: Create Organization if it is not found
          when: org_response.status == 404
          uri:
            url: "{{ aap2_route }}/api/v2/organizations/"
            method: POST
            status_code: 201
            headers:
              Authorization: "Bearer {{ login_response.json.token }}"
            body: '{ "name": "{{ aap2_organization }}" }'
            body_format: json
            validate_certs: no
          register: create_org_response

        - name: Set fact for Organization ID when existing
          set_fact:
            aap2_organization_id: "{{ org_response.json.id }}"
            aap2_org: "{{ org_response.json }}"
          when: org_response.json.id is defined and org_response.status != 404

        - name: Set fact for Organization ID when created
          set_fact:
            aap2_organization_id: "{{ create_org_response.json.id }}"
            aap2_org: "{{ create_org_response.json }}"
          when: create_org_response.json.id is defined and org_response.status == 404

        #### TODO
        
        - name: Create Organization Galaxy Credentials
          uri:
            url: "{{ aap2_route }}/api/v2/organizations/{{ aap2_organization_id }}/galaxy_credentials/"
            method: POST
            status_code:
              - 201
              - 204
            headers:
              Authorization: "Bearer {{ login_response.json.token }}"
            body: '{ "name": "Galaxy Credentials", "description": "Galaxy Credentials", "credential_type": {{ galaxy_credential_types_response.json.results[0].id }}, "id": {{ galaxy_credentials_response.json.results[0].id }} }'
            body_format: json
            validate_certs: no
          register: create_org_galaxy_creds_response
          until: create_org_galaxy_creds_response is not failed
          retries: 10
          delay: 10
      tags:
        - organization

    ###############################################################################################
    ## Execution Environment
    ###############################################################################################

    - name: Execution Environment
      block:
        - name: Check for an Execution Environment
          uri:
            url: "{{ aap2_route }}/api/v2/execution_environments/?name={{ aap2_execution_environments_name|urlencode() }}"
            method: GET
            validate_certs: no
            headers:
              Authorization: "Bearer {{ login_response.json.token }}"
          register: execution_environments_response

        - name: Set fact for Execution Environment ID when existing
          set_fact:
            aap2_execution_environments_id: "{{ execution_environments_response.json.results[0].id }}"
            aap2_execution_environments: "{{ execution_environments_response.json.results[0] }}"
          when: execution_environments_response.json.results[0].id is defined and execution_environments_response.json.count > 0

        - name: Create the Execution Environment if it does not exist
          when: execution_environments_response.json.count == 0
          uri:
            url: "{{ aap2_route }}/api/v2/execution_environments/"
            method: POST
            status_code: 201
            headers:
              Authorization: "Bearer {{ login_response.json.token }}"
            body: '{ "name": "{{ aap2_execution_environments_name }}", "description": "EE with Git and Pip modules for ZTP preinstalled", "organization": null, "image": "quay.io/kenmoini/git-aap2-ee:latest", "credential": null, "pull": "missing" }'
            body_format: json
            validate_certs: no
          register: create_execution_environments_response

        - name: Set fact for Execution Environment ID when created
          set_fact:
            aap2_execution_environments_id: "{{ create_execution_environments_response.json.id }}"
            aap2_execution_environments: "{{ create_execution_environments_response.json }}"
          when: create_execution_environments_response.json.id is defined and execution_environments_response.json.count == 0
      tags:
        - execution_environment

    ###############################################################################################
    ## Inventory
    ###############################################################################################

    - name: Inventory
      block:

        - name: Check for an Inventory
          uri:
            url: "{{ aap2_route }}/api/v2/inventories/?name={{ aap2_inventory_name|urlencode() }}"
            method: GET
            validate_certs: no
            headers:
              Authorization: "Bearer {{ login_response.json.token }}"
          register: inventory_response

        - name: Set fact for Inventory ID when existing
          set_fact:
            aap2_inventory_id: "{{ inventory_response.json.results[0].id }}"
            aap2_inventory: "{{ inventory_response.json.results[0] }}"
          when: inventory_response.json.results[0].id is defined and inventory_response.json.count > 0

        - name: Create the Inventory if it does not exist
          when: inventory_response.json.count == 0
          uri:
            url: "{{ aap2_route }}/api/v2/inventories/"
            method: POST
            status_code: 201
            headers:
              Authorization: "Bearer {{ login_response.json.token }}"
            body: '{ "name": "{{ aap2_inventory_name }}", "description": "{{ aap2_inventory_description|default("") }}", "organization": {{ aap2_organization_id }}, "kind": "", "variables": {}, "host_filter": "", "host_vars": {}, "group_vars": {}, "groups": [], "hosts": [] }'
            body_format: json
            validate_certs: no
          register: create_inventory_response

        - name: Set fact for Inventory ID when created
          set_fact:
            aap2_inventory_id: "{{ create_inventory_response.json.id }}"
            aap2_inventory: "{{ create_inventory_response.json }}"
          when: create_inventory_response.json.id is defined and inventory_response.json.count == 0
      tags:
        - inventory

    ###############################################################################################
    ## Inventory Host
    ###############################################################################################

    - name: Inventory Host
      block:
        - name: Check for the localhost in the target Inventory
          uri:
            url: "{{ aap2_route }}/api/v2/inventories/{{ aap2_inventory_id }}/hosts/?name=localhost"
            method: GET
            validate_certs: no
            headers:
              Authorization: "Bearer {{ login_response.json.token }}"
          register: check_host_response

        - name: Create the localhost in the target Inventory if it does not exist
          when: check_host_response.json.count == 0
          uri:
            url: "{{ aap2_route }}/api/v2/inventories/{{ aap2_inventory_id }}/hosts/"
            method: POST
            status_code: 201
            headers:
              Authorization: "Bearer {{ login_response.json.token }}"
            body: '{"name": "localhost", "description": "", "organization": {{ aap2_organization_id }}, "variables": "---\nansible_connection: local\nansible_python_interpreter: \"{% raw %}{{ ansible_playbook_python }}{% endraw %}\"", "host_filter": "", "kind": ""}'
            body_format: json
            validate_certs: no
          register: create_inventory_host_response
      tags:
        - inventory_host

    ###############################################################################################
    ## Credentials - SCM
    ###############################################################################################

    - name: Credentials - SCM
      block:
        - name: Check for SCM Credentials
          uri:
            url: "{{ aap2_route }}/api/v2/organizations/{{ aap2_organization_id }}/credentials/?name={{ aap2_scm_credential_name|urlencode() }}"
            method: GET
            validate_certs: no
            headers:
              Authorization: "Bearer {{ login_response.json.token }}"
          register: check_scm_credential_response

        - name: Create the SCM Credentials if it does not exist - SSH Authentication
          when: check_scm_credential_response.json.count == 0 and scm_credential_type == "ssh"
          uri:
            url: "{{ aap2_route }}/api/v2/organizations/{{ aap2_organization_id }}/credentials/"
            method: POST
            status_code: 201
            validate_certs: no
            headers:
              Authorization: "Bearer {{ login_response.json.token }}"
            body_format: json
            body: '{ "name": "{{ aap2_scm_credential_name }}", "description": "{{ aap2_scm_credential_description|default("") }}", "organization": {{ aap2_organization_id }}, "kind": "", "inputs": { "ssh_key_data": "{{ lookup("file", scm_credential_private_key) }}" }, "credential_type": {{ credential_types_response.json.results[0].id }} }'
          register: create_scm_credential_response

        - name: Create the SCM Credentials if it does not exist - Basic Authentication
          when: check_scm_credential_response.json.count == 0 and scm_credential_type == "basic"
          uri:
            url: "{{ aap2_route }}/api/v2/organizations/{{ aap2_organization_id }}/credentials/"
            method: POST
            status_code: 201
            validate_certs: no
            headers:
              Authorization: "Bearer {{ login_response.json.token }}"
            body_format: json
            body: '{ "name": "{{ aap2_scm_credential_name }}", "description": "{{ aap2_scm_credential_description|default("") }}", "organization": {{ aap2_organization_id }}, "kind": "", "inputs": { "username": "{{ scm_credential_username }}", "password": "{{ scm_credential_password }}" }, "credential_type": {{ credential_types_response.json.results[0].id }} }'
          register: create_scm_credential_response

        - name: Set fact for SCM Credential ID when created
          set_fact:
            aap2_scm_credential_id: "{{ create_scm_credential_response.json.id }}"
            aap2_scm_credential: "{{ create_scm_credential_response.json }}"
          when: create_scm_credential_response.json.id is defined and check_scm_credential_response.json.count == 0

        - name: Set fact for SCM Credential ID when exists
          set_fact:
            aap2_scm_credential_id: "{{ check_scm_credential_response.json.results[0].id }}"
            aap2_scm_credential: "{{ check_scm_credential_response.json.results[0] }}"
          when: check_scm_credential_response.json.count > 0
      tags:
        - credentials

    ###############################################################################################
    ## Project
    ###############################################################################################

    - name: Project Creation
      block:
        - name: Check for Project
          uri:
            url: "{{ aap2_route }}/api/v2/projects/?name={{ aap2_project_name|urlencode() }}"
            method: GET
            validate_certs: no
            headers:
              Authorization: "Bearer {{ login_response.json.token }}"
          register: check_project_response

        - name: Create the Project if it does not exist
          when: check_project_response.json.count == 0
          uri:
            url: "{{ aap2_route }}/api/v2/projects/"
            method: POST
            status_code: 201
            validate_certs: no
            headers:
              Authorization: "Bearer {{ login_response.json.token }}"
            body_format: json
            body: '{ "name": "{{ aap2_project_name }}", "description": "{{ aap2_project_description|default("") }}", "organization": {{ aap2_organization_id }}, "scm_type": "git", "scm_url": "{{ git_repo_url }}", "scm_clean": true, "scm_track_submodules": false, "scm_delete_on_update": false, "credential": {{ aap2_scm_credential_id }}, "timeout": 0, "scm_update_on_launch": true, "scm_update_cache_timeout": 0, "allow_override": false, "default_environment": null }'
          register: create_project_response

        - name: Set Project ID when created
          set_fact:
            aap2_project_id: "{{ create_project_response.json.id }}"
            aap2_project: "{{ create_project_response.json }}"
          when: create_project_response.json.id is defined and check_project_response.json.count == 0

        - name: Set Project ID when exists
          set_fact:
            aap2_project_id: "{{ check_project_response.json.results[0].id }}"
            aap2_project: "{{ check_project_response.json.results[0] }}"
          when: check_project_response.json.count > 0
      tags:
        - project

    ###############################################################################################
    ## Application
    ###############################################################################################

    - name: Application
      block:
        - name: Check for Application
          uri:
            url: "{{ aap2_route }}/api/v2/applications/?name={{ aap2_application_name|urlencode() }}"
            method: GET
            validate_certs: no
            headers:
              Authorization: "Bearer {{ login_response.json.token }}"
          register: check_application_response

        - name: Create Application if it does not exist
          when: check_application_response.json.count == 0
          uri:
            url: "{{ aap2_route }}/api/v2/applications/"
            method: POST
            status_code: 201
            validate_certs: no
            headers:
              Authorization: "Bearer {{ login_response.json.token }}"
            body_format: json
            body: '{ "name": "{{ aap2_application_name }}", "description": "{{ aap2_application_description|default("") }}", "organization": {{ aap2_organization_id }}, "client_type": "confidential", "redirect_uris": "", "authorization_grant_type": "password", "skip_authorization": false }'
          register: create_application_response

        - name: Set Application ID when created
          set_fact:
            aap2_application_id: "{{ create_application_response.json.id }}"
            aap2_application: "{{ create_application_response.json }}"
          when: create_application_response.json.id is defined and check_application_response.json.count == 0

        - name: Set Application ID when exists
          set_fact:
            aap2_application_id: "{{ check_application_response.json.results[0].id }}"
            aap2_application: "{{ check_application_response.json.results[0] }}"
          when: check_application_response.json.count > 0
      tags:
        - application

    ###############################################################################################
    ## User Application Token
    ###############################################################################################

    - name: User Application Token
      block:
        - name: Check for User Application Token
          uri:
            url: "{{ aap2_route }}/api/v2/users/{{ user_response.json.results[0].id }}/tokens/?application={{ aap2_application_id }}"
            method: GET
            validate_certs: no
            headers:
              Authorization: "Bearer {{ login_response.json.token }}"
          register: check_user_application_token_response

        - name: Create User Application Token if it does not exist
          when: check_user_application_token_response.json.count == 0
          uri:
            url: "{{ aap2_route }}/api/v2/users/{{ user_response.json.results[0].id }}/tokens/"
            method: POST
            status_code: 201
            validate_certs: no
            headers:
              Authorization: "Bearer {{ login_response.json.token }}"
            body_format: json
            body: '{ "application": {{ aap2_application_id }}, "scope": "write", "description": "{{ aap2_application_name }} App Token" }'
          register: create_user_application_token_response

        - name: Set User Application Token ID when created
          set_fact:
            aap2_user_application_token_id: "{{ create_user_application_token_response.json.token }}"
            aap2_user_application_token: "{{ create_user_application_token_response.json }}"
          when: create_user_application_token_response.json.token is defined and check_user_application_token_response.json.count == 0

        - name: Create OpenShift Secret for the User Application Token
          when: aap2_user_application_token_id is defined
          kubernetes.core.k8s:
            api_version: v1
            kind: Secret
            name: "aap2-controller-admin-application-token"
            namespace: "{{ aap2_operator_namespace }}"
            definition:
              stringData:
                token: "{{ aap2_user_application_token_id }}"
            state: present
      tags:
        - user_application_token

    ###############################################################################################
    ## Templates - Create vSphere Infrastructure
    ###############################################################################################

    - name: Templates - Create vSphere Infrastructure
      block:
        - name: Check for "Create vSphere Infrastructure" Job Template
          uri:
            url: "{{ aap2_route }}/api/v2/job_templates/?name={{ aap2_job_template_create_infra_name|urlencode() }}"
            method: GET
            validate_certs: no
            headers:
              Authorization: "Bearer {{ login_response.json.token }}"
          register: check_create_vsphere_infra_job_template_response

        - name: Add "Create vSphere Infrastructure" Job Template when it does not exist
          when: check_create_vsphere_infra_job_template_response.json.count == 0
          uri:
            url: "{{ aap2_route }}/api/v2/job_templates/"
            method: POST
            status_code: 201
            validate_certs: no
            headers:
              Authorization: "Bearer {{ login_response.json.token }}"
            body_format: json
            body: "{{ lookup('template', 'ansible_job_template.json.j2') }}"
          register: create_vsphere_infra_response
          vars:
            job_template_name: "{{ aap2_job_template_create_infra_name }}"
            aap2_inventory_id: "{{ aap2_inventory_id }}"
            aap2_project_id: "{{ aap2_project_id }}"
            job_template_playbook: "{{ aap2_job_template_create_infra_playbook }}"
          until: create_vsphere_infra_response.status == 201
          delay: 10
          retries: 6

        - name: Set "Create vSphere Infrastructure" Template ID when created
          set_fact:
            aap2_create_vsphere_infra_id: "{{ create_vsphere_infra_response.json.id }}"
            aap2_create_vsphere_infra: "{{ create_vsphere_infra_response.json }}"
          when: create_vsphere_infra_response.json.token is defined and check_create_vsphere_infra_job_template_response.json.count == 0

        - name: Set "Create vSphere Infrastructure" ID when existing
          set_fact:
            aap2_create_vsphere_infra_template_id: "{{ check_create_vsphere_infra_job_template_response.json.results[0].id }}"
            aap2_create_vsphere_infra_template: "{{ check_create_vsphere_infra_job_template_response.json.results[0] }}"
          when: check_create_vsphere_infra_job_template_response.json.count > 0

      tags:
        - templates
        - create_vsphere_infra

    ###############################################################################################
    ## Templates - Delete vSphere Infrastructure
    ###############################################################################################

    - name: Templates - Delete vSphere Infrastructure
      block:
        - name: Check for "Delete vSphere Infrastructure" Job Template
          uri:
            url: "{{ aap2_route }}/api/v2/job_templates/?name={{ aap2_job_template_delete_infra_name|urlencode() }}"
            method: GET
            validate_certs: no
            headers:
              Authorization: "Bearer {{ login_response.json.token }}"
          register: check_delete_vsphere_infra_job_template_response

        - name: Add "Delete vSphere Infrastructure" Job Template when it does not exist
          when: check_delete_vsphere_infra_job_template_response.json.count == 0
          uri:
            url: "{{ aap2_route }}/api/v2/job_templates/"
            method: POST
            status_code: 201
            validate_certs: no
            headers:
              Authorization: "Bearer {{ login_response.json.token }}"
            body_format: json
            body: "{{ lookup('template', 'ansible_job_template.json.j2') }}"
          register: delete_vsphere_infra_response
          vars:
            job_template_name: "{{ aap2_job_template_delete_infra_name }}"
            aap2_inventory_id: "{{ aap2_inventory_id }}"
            aap2_project_id: "{{ aap2_project_id }}"
            job_template_playbook: "{{ aap2_job_template_delete_infra_playbook }}"
          until: delete_vsphere_infra_response.status == 201
          delay: 10
          retries: 6

        - name: Set "Delete vSphere Infrastructure" Template ID when created
          set_fact:
            aap2_delete_vsphere_infra_id: "{{ delete_vsphere_infra_response.json.id }}"
            aap2_delete_vsphere_infra: "{{ delete_vsphere_infra_response.json }}"
          when: delete_vsphere_infra_response.json.token is defined and check_delete_vsphere_infra_job_template_response.json.count == 0

        - name: Set "Delete vSphere Infrastructure" ID when existing
          set_fact:
            aap2_delete_vsphere_infra_template_id: "{{ check_delete_vsphere_infra_job_template_response.json.results[0].id }}"
            aap2_delete_vsphere_infra_template: "{{ check_delete_vsphere_infra_job_template_response.json.results[0] }}"
          when: check_delete_vsphere_infra_job_template_response.json.count > 0
      tags:
        - templates
        - delete_vsphere_infra

    ###############################################################################################
    ## Templates - Create Spoke Manifests
    ###############################################################################################

    - name: Templates - Create Spoke Manifests
      block:
        - name: Check for "Create Spoke Manifests" Job Template
          uri:
            url: "{{ aap2_route }}/api/v2/job_templates/?name={{ aap2_job_template_create_spoke_manifests_name|urlencode() }}"
            method: GET
            validate_certs: no
            headers:
              Authorization: "Bearer {{ login_response.json.token }}"
          register: check_create_spoke_manifests_job_template_response

        - name: Add "Create Spoke Manifests" Job Template when it does not exist
          when: check_create_spoke_manifests_job_template_response.json.count == 0
          uri:
            url: "{{ aap2_route }}/api/v2/job_templates/"
            method: POST
            status_code: 201
            validate_certs: no
            headers:
              Authorization: "Bearer {{ login_response.json.token }}"
            body_format: json
            body: "{{ lookup('template', 'ansible_job_template.json.j2') }}"
          register: create_spoke_manifests_response
          vars:
            job_template_name: "{{ aap2_job_template_create_spoke_manifests_name }}"
            aap2_inventory_id: "{{ aap2_inventory_id }}"
            aap2_project_id: "{{ aap2_project_id }}"
            job_template_playbook: "{{ aap2_job_template_create_spoke_manifests_playbook }}"
          until: create_spoke_manifests_response.status == 201
          delay: 10
          retries: 30

        - name: Set Create Spoke Manifests Template ID when created
          set_fact:
            aap2_create_spoke_manifests_template_id: "{{ create_spoke_manifests_response.json.id }}"
            aap2_create_spoke_manifests_template: "{{ create_spoke_manifests_response.json }}"
          when: create_spoke_manifests_response.json.token is defined and check_create_spoke_manifests_job_template_response.json.count == 0

        - name: Set Create Spoke Manifests Template ID when existing
          set_fact:
            aap2_create_spoke_manifests_template_id: "{{ check_create_spoke_manifests_job_template_response.json.results[0].id }}"
            aap2_create_spoke_manifests_template: "{{ check_create_spoke_manifests_job_template_response.json.results[0] }}"
          when: check_create_spoke_manifests_job_template_response.json.count > 0
      tags:
        - templates
        - create_spoke_manifests

    ###############################################################################################
    ## Templates - Create Credentials
    ###############################################################################################

    - name: Templates - Create Credentials
      block:
        - name: Check for "Create Credentials" Job Template
          uri:
            url: "{{ aap2_route }}/api/v2/job_templates/?name={{ aap2_job_template_create_credentials_name|urlencode() }}"
            method: GET
            validate_certs: no
            headers:
              Authorization: "Bearer {{ login_response.json.token }}"
          register: check_create_credentials_job_template_response

        - name: Add "Create Credentials" Job Template when it does not exist
          when: check_create_credentials_job_template_response.json.count == 0
          uri:
            url: "{{ aap2_route }}/api/v2/job_templates/"
            method: POST
            status_code: 201
            validate_certs: no
            headers:
              Authorization: "Bearer {{ login_response.json.token }}"
            body_format: json
            body: "{{ lookup('template', 'ansible_job_template.json.j2') }}"
          register: create_credentials_response
          vars:
            job_template_name: "{{ aap2_job_template_create_credentials_name }}"
            aap2_inventory_id: "{{ aap2_inventory_id }}"
            aap2_project_id: "{{ aap2_project_id }}"
            job_template_playbook: "{{ aap2_job_template_create_credentials_playbook }}"
          until: create_credentials_response.status == 201
          delay: 10
          retries: 30

        - name: Set Create Credentials Template ID when created
          set_fact:
            aap2_create_credential_template_id: "{{ create_credentials_response.json.id }}"
            aap2_create_credential_template: "{{ create_credentials_response.json }}"
          when: create_credentials_response.json.token is defined and check_create_credentials_job_template_response.json.count == 0

        - name: Set Create Credentials Template ID when existing
          set_fact:
            aap2_create_credential_template_id: "{{ check_create_credentials_job_template_response.json.results[0].id }}"
            aap2_create_credential_template: "{{ check_create_credentials_job_template_response.json.results[0] }}"
          when: check_create_credentials_job_template_response.json.count > 0
      tags:
        - templates
        - create_credentials

    ###############################################################################################
    ## Credentials - K8s
    ###############################################################################################

    - name: Credentials - Kubernetes/OpenShift
      block:
        - name: Check for K8s Credentials
          uri:
            url: "{{ aap2_route }}/api/v2/credentials/?name={{ aap2_k8s_credential_name|urlencode() }}"
            method: GET
            validate_certs: no
            headers:
              Authorization: "Bearer {{ login_response.json.token }}"
          register: check_k8s_credential_r

        - name: Create the K8s Credentials if it does not exist for the "Create Credential" Template
          when: check_k8s_credential_r.json.count == 0
          uri:
            url: "{{ aap2_route }}/api/v2/credentials/"
            method: POST
            status_code: 201
            validate_certs: no
            headers:
              Authorization: "Bearer {{ login_response.json.token }}"
            body_format: json
            body: "{{ lookup('template', 'ansible_credential.json.j2') }}"
          register: create_k8s_credential_r

        - name: Set the K8s Credential ID when it is created
          set_fact:
            aap2_k8s_credential_id: "{{ create_k8s_credential_r.json.id }}"
            aap2_k8s_credential: "{{ create_k8s_credential_r.json }}"
          when: check_k8s_credential_r.json.count == 0

        - name: Set the K8s credential ID when it exists
          set_fact:
            aap2_k8s_credential_id: "{{ check_k8s_credential_r.json.results[0].id }}"
            aap2_k8s_credential: "{{ check_k8s_credential_r.json.results[0] }}"
          when: check_k8s_credential_r.json.count > 0
      tags:
        - credentials
        - credentials_k8s

    ###############################################################################################
    ## Credentials - K8s - "Create Credential"
    ###############################################################################################

    - name: Credentials - K8s - "Create Credential"
      block:
        - name: Check for K8s Credentials for the "Create Credential" Template
          uri:
            url: "{{ aap2_route }}/api/v2/job_templates/{{ aap2_create_credential_template_id }}/credentials/?name={{ aap2_k8s_credential_name|urlencode() }}"
            method: GET
            validate_certs: no
            headers:
              Authorization: "Bearer {{ login_response.json.token }}"
          register: check_k8s_credential_response

        - name: Create the K8s Credentials if it does not exist for the "Create Credential" Template
          when: check_k8s_credential_response.json.count == 0
          uri:
            url: "{{ aap2_route }}/api/v2/job_templates/{{ aap2_create_credential_template_id }}/credentials/"
            method: POST
            status_code: 204
            validate_certs: no
            headers:
              Authorization: "Bearer {{ login_response.json.token }}"
            body_format: json
            #body: "{{ lookup('template', 'ansible_credential.json.j2') }}"
            body: '{"associate": true, "id": {{ aap2_k8s_credential_id }}}'
      tags:
        - credentials
        - credentials_k8s
        - credentials_k8s_create_credential

    ###############################################################################################
    ## Credentials - K8s - "Create Spoke Manifests"
    ###############################################################################################

    - name: Credentials - K8s - "Create Spoke Manifests"
      block:
        - name: Check for K8s Credentials for the "Create Spoke Manifests" Template
          uri:
            url: "{{ aap2_route }}/api/v2/job_templates/{{ aap2_create_spoke_manifests_template_id }}/credentials/?credential_type={{ k8s_credential_types_response.json.results[0].id|int }}"
            method: GET
            validate_certs: no
            headers:
              Authorization: "Bearer {{ login_response.json.token }}"
          register: check_create_spoke_manifests_k8s_credential_response

        - name: Create the K8s Credentials if it does not exist for the "Create Spoke Manifests" Template
          when: check_create_spoke_manifests_k8s_credential_response.json.count == 0
          uri:
            url: "{{ aap2_route }}/api/v2/job_templates/{{ aap2_create_spoke_manifests_template_id }}/credentials/"
            method: POST
            status_code: 204
            validate_certs: no
            headers:
              Authorization: "Bearer {{ login_response.json.token }}"
            body_format: json
            #body: "{{ lookup('template', 'ansible_credential.json.j2') }}"
            body: '{"associate": true, "id": {{ aap2_k8s_credential_id }}}'
      tags:
        - credentials
        - credentials_k8s
        - credentials_k8s_create_spoke_manifests

    ###############################################################################################
    ## Credentials - K8s - "Delete vSphere Infrastructures"
    ###############################################################################################

    - name: Credentials - K8s - "Delete vSphere Infrastructures"
      block:
      - name: Check for K8s Credentials for the "Delete vSphere Infrastructures" Template
        uri:
          url: "{{ aap2_route }}/api/v2/job_templates/{{ aap2_delete_vsphere_infra_template_id }}/credentials/?name={{ aap2_k8s_credential_name|urlencode() }}"
          method: GET
          validate_certs: no
          headers:
            Authorization: "Bearer {{ login_response.json.token }}"
        register: check_delete_vsphere_infra_k8s_credential_response

      - name: Create the K8s Credentials if it does not exist for the "Delete vSphere Infrastructure" Template
        when: check_delete_vsphere_infra_k8s_credential_response.json.count == 0
        uri:
          url: "{{ aap2_route }}/api/v2/job_templates/{{ aap2_delete_vsphere_infra_template_id }}/credentials/"
          method: POST
          status_code: 204
          validate_certs: no
          headers:
            Authorization: "Bearer {{ login_response.json.token }}"
          body_format: json
          #body: "{{ lookup('template', 'ansible_credential.json.j2') }}"
          body: '{"associate": true, "id": {{ aap2_k8s_credential_id }}}'
      tags:
        - credentials
        - credentials_k8s
        - credentials_k8s_delete_vsphere_infra

    ###############################################################################################
    ## Credentials - K8s - "Create vSphere Infrastructures"
    ###############################################################################################

    - name: Credentials - K8s - "Create vSphere Infrastructures"
      block:
        - name: Check for K8s Credentials for the "Create vSphere Infrastructures" Template
          uri:
            url: "{{ aap2_route }}/api/v2/job_templates/{{ aap2_create_vsphere_infra_template_id }}/credentials/?name={{ aap2_k8s_credential_name|urlencode() }}"
            method: GET
            validate_certs: no
            headers:
              Authorization: "Bearer {{ login_response.json.token }}"
          register: check_create_vsphere_infra_k8s_credential_response

        - name: Create the K8s Credentials if it does not exist for the "Create vSphere Infrastructure" Template
          when: check_create_vsphere_infra_k8s_credential_response.json.count == 0
          uri:
            url: "{{ aap2_route }}/api/v2/job_templates/{{ aap2_create_vsphere_infra_template_id }}/credentials/"
            method: POST
            status_code: 204
            validate_certs: no
            headers:
              Authorization: "Bearer {{ login_response.json.token }}"
            body_format: json
            #body: "{{ lookup('template', 'ansible_credential.json.j2') }}"
            body: '{"associate": true, "id": {{ aap2_k8s_credential_id }}}'
      tags:
        - credentials
        - credentials_k8s
        - credentials_k8s_create_vsphere_infra

    ###############################################################################################
    ## Debug
    ###############################################################################################

    - name: Debug
      debug:
        msg:
          - "User ID: {{ user_response.json.results[0].id }}"
          - "SCM Credential Type ID: {{ credential_types_response.json.results[0].id }}"
          - "AAP 2 Organization ID: {{ aap2_organization_id }}"
          # - "AAP 2 Organization: {{ aap2_org }}"
          - "AAP 2 Inventory ID: {{ aap2_inventory_id }}"
          # - "AAP 2 Inventory: {{ aap2_inventory }}"
          - "AAP 2 SCM Credential ID: {{ aap2_scm_credential_id }}"
          #- "AAP 2 SCM Credential: {{ aap2_scm_credential }}"
          - "AAP 2 Project ID: {{ aap2_project_id }}"
          #- "AAP 2 Project: {{ aap2_project }}"
          - "AAP 2 Application ID: {{ aap2_application_id }}"
          #- "AAP 2 Application: {{ aap2_application }}"
          - "AAP 2 Execution Environment ID: {{ aap2_execution_environments_id }}"
          #- "AAP 2 Execution Environment: {{ aap2_execution_environments }}"
  tags:
    - aap2_configuration

  always:
    - name: Delete on-demand generated OAuth token
      uri:
        url: "{{ aap2_route }}/api/v2/tokens/{{ login_response.json.id }}/"
        method: DELETE
        validate_certs: no
        status_code: 204
        headers:
          Authorization: "Bearer {{ login_response.json.token }}"
