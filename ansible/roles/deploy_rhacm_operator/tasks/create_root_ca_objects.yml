---

- name: Check to see if the cluster-wide certificates and proxy config are set
  kubernetes.core.k8s_info:
    api_version: config.openshift.io/v1
    kind: Proxy
    name: cluster
  register: r_cluster_proxy_config

- name: Query the cluster-wide Root CAs ConfigMap
  when: (r_cluster_proxy_config.resources[0].spec.trustedCA.name is defined) and (r_cluster_proxy_config.resources[0].spec.trustedCA.name != '')
  block:
    - name: Get just the custom CA Certs added to the cluster
      kubernetes.core.k8s_info:
        api_version: v1
        kind: ConfigMap
        namespace: openshift-config
        name: "{{ r_cluster_proxy_config.resources[0].spec.trustedCA.name }}"
      register: k8s_info_cm_custom_ca_certs

    - name: Set a ConfigMap with just the custom CA Certs
      kubernetes.core.k8s:
        state: present
        api_version: v1
        kind: ConfigMap
        namespace: "{{ target_namespace }}"
        merge_type:
        - strategic-merge
        - merge
        definition:
          metadata:
            name: "{{ custom_root_ca_name }}"
          data:
            ca.crt: "{{ k8s_info_cm_custom_ca_certs.resources[0].data['ca-bundle.crt'] }}"
            ca-bundle.crt: "{{ k8s_info_cm_custom_ca_certs.resources[0].data['ca-bundle.crt'] }}"

    - name: Set a Secret with just the custom CA Certs
      kubernetes.core.k8s:
        state: present
        api_version: v1
        kind: Secret
        namespace: "{{ target_namespace }}"
        merge_type:
        - strategic-merge
        - merge
        definition:
          metadata:
            name: "{{ custom_root_ca_name }}"
          stringData:
            ca.crt: "{{ k8s_info_cm_custom_ca_certs.resources[0].data['ca-bundle.crt'] }}"
            ca-bundle.crt: "{{ k8s_info_cm_custom_ca_certs.resources[0].data['ca-bundle.crt'] }}"

    - name: Add the needed empty ConfigMap to populate with cluster-wide Root CAs
      kubernetes.core.k8s:
        state: present
        api_version: v1
        kind: ConfigMap
        namespace: "{{ target_namespace }}"
        merge_type:
        - strategic-merge
        - merge
        definition:
          metadata:
            name: "{{ root_ca_bundle_name }}"
            labels:
              config.openshift.io/inject-trusted-cabundle: 'true'
          data: {}

    - name: Query the cluster-wide Root CAs ConfigMap
      when: (r_cluster_proxy_config.resources[0].spec.trustedCA.name is defined) and (r_cluster_proxy_config.resources[0].spec.trustedCA.name != '')
      kubernetes.core.k8s_info:
        api_version: v1
        kind: ConfigMap
        namespace: "{{ target_namespace }}"
        name: "{{ root_ca_bundle_name }}"
      until: cm_k8s_info_root_bundle_ca.resources | length > 0
      register: cm_k8s_info_root_bundle_ca
      delay: 10
      retries: 30

    - name: Copy data over to a secret formatted for Assisted Service/CIM/Hive/RHACM
      kubernetes.core.k8s:
        state: present
        api_version: v1
        kind: Secret
        namespace: "{{ target_namespace }}"
        merge_type:
        - strategic-merge
        - merge
        definition:
          metadata:
            name: "{{ root_ca_bundle_name }}"
          stringData:
            ca.crt: "{{ cm_k8s_info_root_bundle_ca.resources[0].data['ca-bundle.crt'] }}"
            ca-bundle.crt: "{{ cm_k8s_info_root_bundle_ca.resources[0].data['ca-bundle.crt'] }}"