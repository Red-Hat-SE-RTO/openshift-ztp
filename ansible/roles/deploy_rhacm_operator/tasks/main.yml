---
# tasks file for deploy_rhacm_operator

- name: Clear out facts
  ansible.builtin.set_fact:
    operator_csv_version: ""
    operator_csv_version_index: ""
    operator_api_definition: ""
    operator_api_version: ""

- name: Get Cluster Version
  kubernetes.core.k8s_info:
    api_version: config.openshift.io/v1
    kind: ClusterVersion
    name: version
  register: r_ocp_version

- name: Set cluster version
  ansible.builtin.set_fact:
    ocp_version: "{{ r_ocp_version.resources[0].status.desired.version | split('-') | first }}"

- name: Query the advanced-cluster-management PackageManifest for the latest version of the Red Hat Advanced Cluster Management Operator
  kubernetes.core.k8s_info:
    api_version: packages.operators.coreos.com/v1
    kind: PackageManifest
    name: advanced-cluster-management
    namespace: openshift-marketplace
  register: r_pm

- name: Set the latest release channels
  ansible.builtin.set_fact:
    operator_release_channels: "{{ operator_release_channels | default([]) + [chan_item.name] }}"
  loop: "{{ r_pm.resources[0].status.channels }}"
  loop_control:
    loop_var: chan_item
    index_var: chan_idx
    label: "{{ chan_item.name }}"

- name: Set the latest CSV version
  ansible.builtin.set_fact:
    operator_channel: "{{ operator_release_channels | sort | last }}"
    operator_csv_version: "{{ chan_item.currentCSV }}"
    operator_csv_version_index: "{{ chan_idx }}"
  loop: "{{ r_pm.resources[0].status.channels }}"
  loop_control:
    loop_var: chan_item
    index_var: chan_idx
    label: "{{ chan_item.name }}"
  when: chan_item.name == operator_release_channels|sort|last

- name: Set additional operator specific facts
  ansible.builtin.set_fact:
    operator_api_definition: "{{ r_pm.resources[0].status.channels[operator_csv_version_index].currentCSVDesc.customresourcedefinitions.owned | json_query(\"[?(@.kind=='MultiClusterHub')].name\") | first }}"
    operator_api_version: "{{ r_pm.resources[0].status.channels[operator_csv_version_index].currentCSVDesc.customresourcedefinitions.owned | json_query(\"[?(@.kind=='MultiClusterHub')].version\") | first }}"

- name: Debug
  ansible.builtin.debug:
    msg:
      - "OpenShift Version: {{ ocp_version }}"
      - "Operator Release version: {{ operator_release_channels | sort | last }}"
      - "Operator CSV version: {{ operator_csv_version }}"
      - "Operator API Definition: {{ operator_api_definition }}"
      - "Operator API Version: {{ operator_api_version }}"

# ===============================================================================================
# Namespaces
# ===============================================================================================

- name: Create namespaces
  kubernetes.core.k8s:
    state: present
    kind: Namespace
    api_version: v1
    merge_type:
      - strategic-merge
      - merge
    definition:
      metadata:
        name: "{{ ns_item }}"
        #labels:
          #openshift.io/cluster-monitoring: 'true'
      spec: {}
  loop:
    - "{{ acm_operator_namespace }}"
    - open-cluster-management-observability
    - multicluster-engine
    - hive
    - assisted-installer
  loop_control:
    loop_var: ns_item

- name: Add infrastructure annotations to the namespaces if needed
  when: deploy_to_infra_nodes | bool
  kubernetes.core.k8s:
    state: present
    kind: Namespace
    api_version: v1
    merge_type:
      - strategic-merge
      - merge
    definition:
      metadata:
        name: "{{ ns_item }}"
        annotations:
          scheduler.alpha.kubernetes.io/defaultTolerations: '[{"operator": "Exists", "effect": "NoSchedule", "key": "node-role.kubernetes.io/infra"},{"operator": "Exists", "effect": "NoExecute", "key": "node-role.kubernetes.io/infra"}]'
  loop:
    - open-cluster-management-agent
    - open-cluster-management-agent-addon
  loop_control:
    loop_var: ns_item

# ===============================================================================================
# Add the custom Root CAs
# ===============================================================================================

- name: Add ConfigMaps and Secrets needed for Custom Root CAs
  ansible.builtin.include_tasks: create_root_ca_objects.yml
  vars:
    target_namespace: "{{ ns_item }}"
    root_ca_bundle_name: "{{ root_ca_object_name }}"
    #custom_root_ca_name: "{{ custom_root_ca_name }}"
  loop:
    - "{{ acm_operator_namespace }}"
    - open-cluster-management-observability
    - multicluster-engine
    - hive
    - assisted-installer
  loop_control:
    loop_var: ns_item

#- name: Check to see if the cluster-wide certificates are set
#  kubernetes.core.k8s_info:
#    api_version: config.openshift.io/v1
#    kind: Proxy
#    name: cluster
#  register: r_cluster_root_ca_rhacm

################################################################ RHACM Namespace

#- name: Query the cluster-wide Root CAs ConfigMap
#  kubernetes.core.k8s_info:
#    api_version: v1
#    kind: ConfigMap
#    namespace: "{{ acm_operator_namespace }}"
#    name: cluster-root-ca-bundle
#  register: cm_k8s_info_run

#- name: Add the needed empty ConfigMap to populate with cluster-wide Root CAs
#  when: (r_cluster_root_ca_rhacm.resources[0].spec.trustedCA.name is defined) and (r_cluster_root_ca_rhacm.resources[0].spec.trustedCA.name != '') and (cm_k8s_info_run.resources | length == 0)
#  kubernetes.core.k8s:
#    state: present
#    api_version: v1
#    kind: ConfigMap
#    namespace: "{{ acm_operator_namespace }}"
#    merge_type:
#    - strategic-merge
#    - merge
#    definition:
#      metadata:
#        name: cluster-root-ca-bundle
#        labels:
#          config.openshift.io/inject-trusted-cabundle: 'true'
#      data: {}

################################################################ Hive

#- name: Query the cluster-wide Root CAs ConfigMap
#  kubernetes.core.k8s_info:
#    api_version: v1
#    kind: ConfigMap
#    namespace: hive
#    name: cluster-root-ca-bundle
#  register: cm_k8s_info_run
#
#- name: Add the needed empty ConfigMap to populate with cluster-wide Root CAs
#  when: (r_cluster_root_ca_rhacm.resources[0].spec.trustedCA.name is defined) and (r_cluster_root_ca_rhacm.resources[0].spec.trustedCA.name != '') and (cm_k8s_info_run.resources | length == 0)
#  kubernetes.core.k8s:
#    state: present
#    api_version: v1
#    kind: ConfigMap
#    namespace: hive
#    merge_type:
#    - strategic-merge
#    - merge
#    definition:
#      metadata:
#        name: cluster-root-ca-bundle
#        labels:
#          config.openshift.io/inject-trusted-cabundle: 'true'
#      data: {}

################################################################ multicluster-engine

#- name: Query the cluster-wide Root CAs ConfigMap
#  kubernetes.core.k8s_info:
#    api_version: v1
#    kind: ConfigMap
#    namespace: multicluster-engine
#    name: cluster-root-ca-bundle
#  register: cm_k8s_info_run
#
#- name: Add the needed empty ConfigMap to populate with cluster-wide Root CAs
#  when: (r_cluster_root_ca_rhacm.resources[0].spec.trustedCA.name is defined) and (r_cluster_root_ca_rhacm.resources[0].spec.trustedCA.name != '') and (cm_k8s_info_run.resources | length == 0)
#  kubernetes.core.k8s:
#    state: present
#    api_version: v1
#    kind: ConfigMap
#    namespace: multicluster-engine
#    merge_type:
#    - strategic-merge
#    - merge
#    definition:
#      metadata:
#        name: cluster-root-ca-bundle
#        labels:
#          config.openshift.io/inject-trusted-cabundle: 'true'
#      data: {}

# ===============================================================================================
# Add the Pull Secret Secrets
# ===============================================================================================

- name: Query the OCP pull-secret
  kubernetes.core.k8s_info:
    api_version: v1
    kind: Secret
    namespace: openshift-config
    name: pull-secret
  register: r_pull_secret

- name: Create a Secret in the RHACM namespaces
  kubernetes.core.k8s:
    state: present
    api_version: v1
    kind: Secret
    namespace: "{{ ns_item }}"
    name: cluster-pull-secret
    definition:
      type: kubernetes.io/dockerconfigjson
      data:
        .dockerconfigjson: "{{ r_pull_secret.resources[0].data['.dockerconfigjson'] }}"
  loop:
    - hive
    - multicluster-engine
    - "{{ acm_operator_namespace }}"
    - open-cluster-management-observability
  loop_control:
    loop_var: ns_item

- name: Setup Hive RBAC
  kubernetes.core.k8s:
    state: present
    merge_type:
      - strategic-merge
      - merge
    definition: "{{ lookup('template', template_item) | from_yaml }}"
  loop:
    - "templates/rbac_hive.yaml.j2"
  loop_control:
    loop_var: template_item

- name: Create Nooba Bucket
  when: enable_rhacm_observability | bool
  kubernetes.core.k8s:
    state: present
    merge_type:
      - strategic-merge
      - merge
    definition: "{{ lookup('template', template_item) | from_yaml }}"
  loop:
    - "templates/10_objectbucketclaim.yaml.j2"
  loop_control:
    loop_var: template_item

- name: Query the namespace for OperatorGroups
  kubernetes.core.k8s_info:
    api_version: operators.coreos.com/v1
    kind: OperatorGroup
    namespace: "{{ acm_operator_namespace }}"
  register: r_og_list

- name: Create Operator OperatorGroup
  kubernetes.core.k8s:
    state: present
    apply: true
    definition: "{{ lookup('template', 'templates/operatorgroup.yaml.j2') | from_yaml }}"
  register: k8s_run
  until: k8s_run is not failed
  delay: 10
  retries: 3
  when: r_og_list.resources | length == 0

- name: Create Operator subscription
  kubernetes.core.k8s:
    state: present
    merge_type:
      - strategic-merge
      - merge
    definition: "{{ lookup('template', 'templates/subscription.yaml.j2') | from_yaml }}"
  register: k8s_run
  until: k8s_run is not failed
  delay: 10
  retries: 3

- name: Wait for the Operator to become available - before v4.9.0
  kubernetes.core.k8s_info:
    api_version: apiextensions.k8s.io/v1beta1
    kind: CustomResourceDefinition
    name: "{{ operator_api_definition }}"
  register: crd_check
  retries: 200
  delay: 10
  until: crd_check.resources | list | length == 1
  when: ocp_version is version('4.9.0', operator='lt', strict=True)

- name: Wait for the Operator to come online - v4.9.0+
  kubernetes.core.k8s_info:
    api_version: apiextensions.k8s.io/v1
    kind: CustomResourceDefinition
    name: "{{ operator_api_definition }}"
  register: crd_check
  retries: 200
  delay: 10
  until: crd_check.resources | list | length == 1
  when: ocp_version is version('4.9.0', operator='ge', strict=True)

- name: Create MultiClusterHub
  kubernetes.core.k8s:
    state: present
    merge_type:
      - strategic-merge
      - merge
    definition: "{{ lookup('template', 'templates/multiclusterhub.yaml.j2') | from_yaml }}"
  register: k8s_run
  until: k8s_run is not failed
  delay: 10
  retries: 3

# This is done per cluster in the clusternamespace
#- name: Create Ansible Spoke Standards ClusterCurator
#  kubernetes.core.k8s:
#    state: present
#    merge_type:
#    - strategic-merge
#    - merge
#    definition: "{{ lookup('template', 'templates/spoke-standards-ansible.yaml.j2') | from_yaml }}"
#  register: k8s_run
#  until: k8s_run is not failed
#  delay: 10
#  retries: 3

- name: Deploy RHACM Observability
  when: enable_rhacm_observability | bool
  block:
    - name: Get Nooba bucket Secret
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Secret
        namespace: open-cluster-management-observability
        name: thanos-object-storage-bucket
      register: r_nooba_secret
      until: r_nooba_secret.resources | length > 0
      delay: 10
      retries: 30

    - name: Create new secret for the thanos s3 binding
      kubernetes.core.k8s:
        state: present
        api_version: v1
        kind: Secret
        definition:
          metadata:
            namespace: open-cluster-management-observability
            name: thanos-object-storage
          type: Opaque
          stringData:
            thanos.yaml: |
              type: s3
              config:
                bucket: thanos-object-storage-bucket
                endpoint: s3.openshift-storage.svc
                insecure: true
                access_key: {{ r_nooba_secret.resources[0].data.AWS_ACCESS_KEY_ID | b64decode }}
                secret_key: {{ r_nooba_secret.resources[0].data.AWS_SECRET_ACCESS_KEY | b64decode }}

    - name: Create MultiClusterObservability
      kubernetes.core.k8s:
        state: present
        merge_type:
          - strategic-merge
          - merge
        definition: "{{ lookup('template', 'templates/10_multi_observability_cr.yaml.j2') | from_yaml }}"
      register: k8s_run
      until: k8s_run is not failed
      delay: 10
      retries: 3
