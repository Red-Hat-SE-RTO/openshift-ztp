---
- name: Create a Spoke Cluster Manifest Set
  hosts: all
  gather_facts: no
  vars:
    # source_git_repo should probably be overridden at execution
    source_git_repo: https://github.com/Red-Hat-SE-RTO/openshift-ztp
    ## Defaults - shouldn't need to be changed
    target_spoke_git_path: "ztp-clusters/{{ deployment_type }}/{{ cluster_type }}/{{ cluster_name }}"

    git_push_credentials_secret_name: "ztp-git-push-credentials"
    git_push_credentials_secret_namespace: "ztp-credentials"

    generate_ssh_keys: true
    use_https_repo: false
    deployment_type: vsphere
    openshift_release: "4.9.9"
    template_secrets: true
    secret_management: reflector
    credential_namespace: "ztp-credentials"
    ansible_tower_secret_name: "ansible-tower-credentials"
    pull_secret_secret_name: "assisted-deployment-pull-secret"
    ansible_job_template_name: vsphere-infra-ztp

  tasks:
  #######################################################
  ## Tower Preflight
  - name: Preflight for Tower
    block:
    - name: Install needed pip modules if running in Tower
      pip:
        name:
          - kubernetes
          - openshift==0.12.1
        extra_args: --upgrade
      delegate_to: localhost

    - name: Install needed packages in Ansible EE
      shell: microdnf install -y git
      delegate_to: localhost

    when: tower_job_id is defined

  #######################################################
  ## General Preflight
  #- name: Program Preflight
  #  block:
  #  - name: Check for required programs
  #    ansible.builtin.shell: "which {{ item }}"
  #    register: program_check
  #    ignore_errors: true
  #    with_items:
  #      - git
  #    when: tower_job_id is not defined
  #    
  #  - name: Fail if needed programs are not found
  #    fail:
  #      msg: "{{ item.cmd | replace('which ','') }} is not found! You need to install it first."
  #    failed_when: item.rc != 0
  #    loop: "{{ program_check.results }}"
  #    loop_control:
  #      label: "{{ item.cmd | replace('which ','') }}"
  #    when: tower_job_id is not defined
  #  when: tower_job_id is not defined

  - name: General variable Preflight
    block:

    - name: Check cluster_nodes count against the different cluster_types
      fail:
        msg: "cluster_type {{ cluster_type }} requires at least 3 control-plane nodes, but only {{ cluster_nodes|length }} nodes were found!"
      failed_when: cluster_type != "sno" and cluster_nodes|length <= 2

    - name: Single node OpenShift can only be a single node!
      fail:
        msg: "cluster_type {{ cluster_type }} requires only 1 control-plane nodes but {{ cluster_nodes|length }} nodes were configured!"
      failed_when: cluster_type == "sno" and cluster_nodes|length >= 2

  #######################################################
  ## OpenShift Query Preflights
  - name: Query OpenShift for needed Configs & Secrets with ssh key
    block:
    - name: Get the Git Credentials
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Secret
        namespace: "{{ git_push_credentials_secret_namespace }}"
        name: "{{ git_push_credentials_secret_name }}"
      register: git_secret
      when: generate_ssh_keys|bool 

    - name: Fail if the Git credentials secret is not found
      fail:
        msg: "No Git credentials secret found! Looking for {{ git_push_credentials_secret_namespace }}/{{ git_push_credentials_secret_name }}"
      when: git_secret.resources | length == 0

    - name: Read in the Git Push Information
      set_fact:
        push_git_auth_method: "{{ git_secret.resources[0].data.git_auth_method | b64decode }}"
        push_git_branch: "{{ git_secret.resources[0].data.git_branch | b64decode }}"
        push_git_password: "{{ git_secret.resources[0].data.git_password | b64decode }}"
        push_git_username: "{{ git_secret.resources[0].data.git_username | b64decode }}"
        push_git_ssh_key: "{{ git_secret.resources[0].data.git_ssh_key | b64decode }}"
        push_git_url: "{{ git_secret.resources[0].data.git_url | b64decode }}"
        push_git_user_name: "{{ git_secret.resources[0].data.git_user_name | b64decode }}"
        push_git_user_email: "{{ git_secret.resources[0].data.git_user_email | b64decode }}"
      no_log: true
      when: generate_ssh_keys|bool 
    when: use_https_repo |bool == false

  ## OpenShift Query Preflights
  - name: Query OpenShift for needed Configs & Secrets without ssh key
    block:
    - name: Get the Git Credentials
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Secret
        namespace: "{{ git_push_credentials_secret_namespace }}"
        name: "{{ git_push_credentials_secret_name }}"
      register: git_secret
      when: use_https_repo|bool 

    - name: Fail if the Git credentials secret is not found
      fail:
        msg: "No Git credentials secret found! Looking for {{ git_push_credentials_secret_namespace }}/{{ git_push_credentials_secret_name }}"
      when: git_secret.resources | length == 0

    - name: Read in the Git Push Information
      set_fact:
        push_git_auth_method: "{{ git_secret.resources[0].data.git_auth_method | b64decode }}"
        push_git_branch: "{{ git_secret.resources[0].data.git_branch | b64decode }}"
        push_git_password: "{{ git_secret.resources[0].data.git_password | b64decode }}"
        push_git_username: "{{ git_secret.resources[0].data.git_username | b64decode }}"
        push_git_url: "{{ git_secret.resources[0].data.git_url | b64decode }}"
        push_git_user_name: "{{ git_secret.resources[0].data.git_user_name | b64decode }}"
        push_git_user_email: "{{ git_secret.resources[0].data.git_user_email | b64decode }}"
      no_log: true
      when: use_https_repo|bool 
    when: use_https_repo|bool 

  #######################################################
  ## Filesystem Operations
  - name: Filesystem Configuration
    block:
    - name: Create a temporary directory
      ansible.builtin.tempfile:
        state: directory
        suffix: build
      register: temp_dir

    - name: Create subdirectories in temporary path
      file:
        path: "{{ temp_dir.path }}/{{ path_item }}"
        state: directory
      loop:
        - git
        - secrets
      loop_control:
        loop_var: path_item
  
  - name: Clone down the repo
    ansible.builtin.git:
      repo: "{{ source_git_repo }}"
      dest: "{{ temp_dir.path }}/git"
      clone: yes
  
  - name: Create a directory for the spoke cluster
    file:
      path: "{{ temp_dir.path }}/git/{{ target_spoke_git_path }}"
      state: directory

  #######################################################
  ## Cluster SSH Key Operations
  - name: Set the SSH Key
    block:
    - name: Create a new SSH Key Pair
      community.crypto.openssh_keypair:
        path: "{{ temp_dir.path }}/secrets/ssh_key"

    - name: Set the SSH Key facts for path
      set_fact:
        ssh_private_key_path: "{{ temp_dir.path }}/secrets/ssh_key"
        ssh_public_key_path: "{{ temp_dir.path }}/secrets/ssh_key.pub"
      no_log: true

    - name: Set the SSH Key facts
      set_fact:
        ssh_private_key: "{{ lookup('file', temp_dir.path+'/secrets/ssh_key') }}"
        ssh_public_key: "{{ lookup('file', temp_dir.path+'/secrets/ssh_key.pub') }}"
      no_log: true
    when: generate_ssh_keys|bool

  - name: Read in the SSH Keys
    block:
    - name: Set the SSH Key facts
      set_fact:
        ssh_private_key: "{{ lookup('file', ssh_private_key_path) }}"
        ssh_public_key: "{{ lookup('file', ssh_public_key_path) }}"
      no_log: true
    when: (generate_ssh_keys|bool == false and use_https_repo|bool == false)

  #######################################################
  ## Set Fact logic
  - name: Set facts
    block:
    - name: Set general facts
      set_fact:
        api_vip: "{{ cluster_api_vip }}"
        ingress_vip: "{{ cluster_load_balancer_vip }}"
        machine_network_cidr: "{{ cluster_node_cidr }}"
        node_network_type: "{{ cluster_node_network_ipam }}"

  #######################################################
  ## Spoke Cluster Manifest Templating
  - name: Template the Spoke Cluster Manifests
    block:

    - name: Template the Namepsace
      template:
        src: templates/00_namespace.yml.j2
        dest: "{{ temp_dir.path }}/git/{{ target_spoke_git_path }}/00_namespace.yml"

    - name: Template the Reflected Secrets
      template:
        src: "templates/{{ template_item }}.j2"
        dest: "{{ temp_dir.path }}/git/{{ target_spoke_git_path }}/{{ template_item }}"
      loop:
        - 01_reflected_ansible_tower_credential.yml
        - 01_reflected_pull_secret.yml
        - 01_reflected_vcenter_secret.yml
      loop_control:
        loop_var: template_item
      when: secret_management == "reflector" and template_secrets|bool

    - name: Template the AgentClusterInstall
      template:
        src: templates/02_agentclusterinstall.yml.j2
        dest: "{{ temp_dir.path }}/git/{{ target_spoke_git_path }}/02_agentclusterinstall.yml"

    - name: Template the ClusterDeployment
      template:
        src: templates/03_clusterdeployment.yml.j2
        dest: "{{ temp_dir.path }}/git/{{ target_spoke_git_path }}/03_clusterdeployment.yml"

    - name: Template the KlusterletAddonConfig
      template:
        src: templates/04_klusterletaddonconfig.yml.j2
        dest: "{{ temp_dir.path }}/git/{{ target_spoke_git_path }}/04_klusterletaddonconfig.yml"

    - name: Template the ManagedCluster
      template:
        src: templates/05_managedcluster.yml.j2
        dest: "{{ temp_dir.path }}/git/{{ target_spoke_git_path }}/05_managedcluster.yml"

    - name: Template the InfraEnv
      template:
        src: templates/07_infraenv.yml.j2
        dest: "{{ temp_dir.path }}/git/{{ target_spoke_git_path }}/07_infraenv.yml"

    - name: Template the ClusterConfig
      template:
        src: templates/08_cluster_config.yml.j2
        dest: "{{ temp_dir.path }}/git/{{ target_spoke_git_path }}/08_cluster_config.yml"

    - name: Template the AnsibleJob
      template:
        src: templates/09_ansiblejob.yml.j2
        dest: "{{ temp_dir.path }}/git/{{ target_spoke_git_path }}/09_ansiblejob.yml"

    - name: Template the NMState Config
      template:
        src: templates/11_nmstate_config.yml.j2
        dest: "{{ temp_dir.path }}/git/{{ target_spoke_git_path }}/11_nmstate_config-{{ node_item.name }}.yml"
      loop: "{{ cluster_nodes }}"
      loop_control:
        loop_var: node_item

  #######################################################
  ## Git Push
  - name: Technologic
    block:

      - name: Git set push user info
        shell: |
          git config user.email "{{ push_git_user_email }}"
          git config user.name "{{ push_git_user_name }}"
        args:
          chdir: "{{ temp_dir.path }}/git"

      - name: Git set push user token info
        shell: |
          git config --global github.user  user1
          git config --global github.token d4a1fa03f3ecdd6aab0775b42547e4da94f01ee0
        args:
          chdir: "{{ temp_dir.path }}/git"
        when: push_git_auth_method == "https"

      - name: Git add the new cluster
        shell: |
          git add {{ target_spoke_git_path }}
        args:
          chdir: "{{ temp_dir.path }}/git"

      - name: Git commit the new cluster
        shell: |
          git commit -m "add new ztp cluster: {{ cluster_name }}"
        args:
          chdir: "{{ temp_dir.path }}/git"

      - name: Git set new remote
        shell: |
          git remote add private {{ push_git_url }}
        args:
          chdir: "{{ temp_dir.path }}/git"
        when: push_git_auth_method == "ssh"

      - name: Save the contents of the SSH Key to a file
        copy:
          content: "{{ push_git_ssh_key }}"
          dest: "{{ temp_dir.path }}/secrets/push_git_ssh_key"
          mode: 0600
        when: push_git_auth_method == "ssh"
        no_log: true

      - name: Create .ssh folder
        shell: |
          mkdir -p $HOME/.ssh
          chmod 0700 $HOME/.ssh
        args:
          chdir: "{{ temp_dir.path }}/git"
        when: push_git_auth_method == "ssh"

      - name: Git push the new cluster
        shell: |
          ssh-keyscan github.com >> $HOME/.ssh/known_hosts
          chmod 0644 $HOME/.ssh/known_hosts
          git config core.sshCommand "ssh -i {{ temp_dir.path }}/secrets/push_git_ssh_key -oStrictHostKeyChecking=no -oUserKnownHostsFile=/dev/null"
          git push private {{ push_git_branch }}
        args:
          chdir: "{{ temp_dir.path }}/git"
        when: push_git_auth_method == "ssh"

      - name: extract git url
        shell: echo "{{ push_git_url }}" | tr "/" " " | awk '{print $2}'
        register: extract_output
        when: push_git_auth_method == "https"

      - name: save git url
        set_fact: 
          git_url_https: "{{ extract_output.stdout }}"
        when: push_git_auth_method == "https"

      - name: extract git path
        shell: echo "{{ push_git_url }}" | tr "/" " " | awk '{print $3}'
        register: extract_path_output
        when: push_git_auth_method == "https"

      - name: save git path
        set_fact: 
          git_url_https: "{{ extract_path_output.stdout }}"
        when: push_git_auth_method == "https"

      - name: extract git repo 
        shell: echo "{{ push_git_url }}" | tr "/" " " | awk '{print $4}'
        register: extract_repo_output
        when: push_git_auth_method == "https"

      - name: save git repo
        set_fact: 
          git_url_https: "{{ extract_repo_output.stdout }}"
        when: push_git_auth_method == "https"

      - name: Git set new remote
        shell: |
          git remote add private "https://{{ push_git_username }}:{{ push_git_password }}@{{ git_url_https }}/{{ extract_path_output }}/{{ extract_repo_output }}"
        args:
          chdir: "{{ temp_dir.path }}/git"
        when: push_git_auth_method == "https"

      - name: git config --list
        shell: |
          git config --list
        args:
          chdir: "{{ temp_dir.path }}/git"
        when: push_git_auth_method == "https"

      - name: Git push the new cluster
        shell: |
          git push private main  
        args:
          chdir: "{{ temp_dir.path }}/git"
        when: push_git_auth_method == "https"

  #######################################################
  ## Cleanup
  - name: Delete the temporary directory
    ansible.builtin.file:
      path: "{{ temp_dir.path }}"
      state: absent
      force: yes

