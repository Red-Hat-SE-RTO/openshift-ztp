- name: Create Credentials for ZTP
  connection: local
  hosts: localhost
  gather_facts: no

  vars:

    credentials_namespace: ztp-credentials

    create_aap2_controller_secret: true
    aap2_operator_namespace: ansible-automation-platform
    aap2_controller_name: ac-tower

    ## Path to the OpenShift Pull Secret
    create_pull_secret_secret: true
    pull_secret_path: ~/rh-ocp-pull-secret.json
    pull_secret: "{{ lookup('file', pull_secret_path) }}"

    ## vCenter Credentials
    create_vsphere_credentials_secret: true
    vcenter_secret_name: loe-rdu-vcenter-credentials
    vcenter_fqdn: vcenter.example.com
    vcenter_username: some-user
    vcenter_password: some-password

  tasks:
  #######################################################
  ## Tower Preflight
  - name: Preflight for Tower
    block:
    - name: Install needed pip modules if running in Tower
      pip:
        name:
          - kubernetes
          - openshift==0.12.1
        extra_args: --upgrade
      delegate_to: localhost

    - name: Install needed packages in Ansible EE
      shell: microdnf install -y git
      delegate_to: localhost

    when: tower_job_id is defined

  #######################################################
  ## Namespace Creation
  - name: Create namespace for {{ credentials_namespace }}
    kubernetes.core.k8s:
      state: present
      kind: Namespace
      api_version: v1
      merge_type:
      - strategic-merge
      - merge
      definition:
        metadata:
          name: "{{ credentials_namespace }}"
        spec: {}
    register: k8s_run
    until: k8s_run is not failed
    delay: 10
    retries: 30

  #######################################################
  ## AAP2 Controller Secret
  - name: Create the AAP2 Controller Secrets from the aap2-controller-admin-application-token Secret
    block:
    - name: Get the AAP2 Controller Route
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Route
        namespace: "{{ aap2_operator_namespace }}"
        name: "{{ aap2_controller_name }}"
      register: aap2_controller_route

    - name: Get the AAP2 Controller User OAuth Token
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Secret
        namespace: "{{ aap2_operator_namespace }}"
        name: aap2-controller-admin-application-token
      register: aap2_controller_user_oauth_token

    - name: Create Ansible Controller/Tower OAuth Secret
      kubernetes.core.k8s:
        state: present
        apply: yes
        definition:
          apiVersion: v1
          kind: Secret
          metadata:
            name: ansible-tower-credentials
            namespace: "{{ credentials_namespace }}"
            annotations:
              reflector.v1.k8s.emberstack.com/reflection-allowed: "true"
              reflector.v1.k8s.emberstack.com/reflection-allowed-namespaces: '.*'
              reflector.v1.k8s.emberstack.com/reflection-auto-enabled: 'true'
          type: Opaque
          stringData:
            host: "https://{{ aap2_controller_route.resources[0].status.ingress[0].host }}"
            token: "{{ aap2_controller_user_oauth_token.resources[0].data.token }}"
      register: k8s_run
      until: k8s_run is not failed
      delay: 10
      retries: 30
    when: create_aap2_controller_secret|bool


  #######################################################
  ## Assisted Service Pull Secret Secret Creation
  - name: Create Assisted Service Pull Secret
    when: create_pull_secret_secret|bool
    kubernetes.core.k8s:
      state: present
      apply: yes
      definition:
        apiVersion: v1
        kind: Secret
        metadata:
          name: assisted-deployment-pull-secret
          namespace: "{{ credentials_namespace }}"
          annotations:
            reflector.v1.k8s.emberstack.com/reflection-allowed: "true"
            reflector.v1.k8s.emberstack.com/reflection-allowed-namespaces: '.*'
            reflector.v1.k8s.emberstack.com/reflection-auto-enabled: 'true'
        type: Opaque
        stringData:
          .dockerconfigjson: '{{ pull_secret | to_json }}'
    register: k8s_run
    until: k8s_run is not failed
    delay: 10
    retries: 30


  #######################################################
  ## vSphere Credential Secret Creation
  - name: Create vCenter Credentials Secret
    when: create_vsphere_credentials_secret|bool
    kubernetes.core.k8s:
      state: present
      apply: yes
      definition:
        apiVersion: v1
        kind: Secret
        metadata:
          name: "{{ vcenter_secret_name }}"
          namespace: "{{ credentials_namespace }}"
          annotations:
            reflector.v1.k8s.emberstack.com/reflection-allowed: "true"
            reflector.v1.k8s.emberstack.com/reflection-allowed-namespaces: '.*'
            reflector.v1.k8s.emberstack.com/reflection-auto-enabled: 'true'
        type: Opaque
        stringData:
          vcenter_fqdn: "{{ vcenter_fqdn }}"
          vcenter_username: "{{ vcenter_username }}"
          vcenter_password: "{{ vcenter_password }}"
          skip_ssl_validation: "true"
    register: k8s_run
    until: k8s_run is not failed
    delay: 10
    retries: 30
